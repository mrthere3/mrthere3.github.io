<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Django学习笔记</title>
    <link href="/2022/10/29/DJANGO%20%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/29/DJANGO%20%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><em>DJANGO</em> 学习</p><h2 id="1-安装django"><a href="#1-安装django" class="headerlink" title="1.安装django"></a>1.安装django</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install django<br></code></pre></td></tr></table></figure><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>django项目中会有一些默认的文件和默认的文件夹</p><h2 id="2-1在终端"><a href="#2-1在终端" class="headerlink" title="2.1在终端"></a>2.1在终端</h2><p>在项目路径下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">django-admin startproject projectname</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">│  manage<span class="hljs-selector-class">.py</span> <span class="hljs-selector-attr">[项目的管理，启动项目，创建app，数据管理]</span><br>│<br>└─mydj<br>        asgi<span class="hljs-selector-class">.py</span><span class="hljs-selector-attr">[接受网络请求]</span><br>        settings<span class="hljs-selector-class">.py</span><span class="hljs-selector-attr">[项目配置 ]</span><br>        urls<span class="hljs-selector-class">.py</span><span class="hljs-selector-attr">[路径函数的对应关系]</span><br>        wsgi<span class="hljs-selector-class">.py</span><span class="hljs-selector-attr">[接受网络请求]</span><br>        __init__.py<br></code></pre></td></tr></table></figure><h2 id="3-APP"><a href="#3-APP" class="headerlink" title="3.APP"></a>3.APP</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">-项目<br>-<span class="hljs-keyword">app</span>,用户管理【表结构、函数、HTML模板、CSS】<br>-<span class="hljs-keyword">app</span>,订单管理【表结构、函数、HTML模板、CSS】<br>-<span class="hljs-keyword">app</span>,后台管理【表结构、函数、HTML模板、CSS】<br>-<span class="hljs-keyword">app</span>,网站【表结构、函数、HTML模板、CSS】<br>-<span class="hljs-keyword">app</span>,API【表结构、函数、HTML模板、CSS】<br>..<br>注意 我们开发变焦简介，用不到多<span class="hljs-keyword">app</span><br></code></pre></td></tr></table></figure><p>创建app</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py startapp appname<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py startapp appname<br><span class="hljs-comment">#文件结构如下图</span><br>│  manage.py<br>│<br>├─app01<br>│  │  admin.py 【django默认提供了后台管理】<br>│  │  apps.py<br>│  │  models.py<br>│  │  tests.py【单元测试文件】<br>│  │  views.py【视图函数】<br>│  │  __init__.py<br>│  │<br>│  └─migrations<br>│          __init__.py<br>│<br>└─mydj<br>    │  asgi.py<br>    │  settings.py<br>    │  urls.py<br>    │  wsgi.py<br>    │  __init__.py<br><br></code></pre></td></tr></table></figure><h2 id="4-快速上手"><a href="#4-快速上手" class="headerlink" title="4.快速上手"></a>4.快速上手</h2><h3 id="在setting-py文件当中注册app"><a href="#在setting-py文件当中注册app" class="headerlink" title="在setting.py文件当中注册app"></a>在setting.py文件当中注册app</h3><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208051521176.png"></p><h3 id="编写url和视图函数关系"><a href="#编写url和视图函数关系" class="headerlink" title="编写url和视图函数关系"></a>编写url和视图函数关系</h3><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208051528185.png"></p><ol><li>路由系统复杂多变，也可以通过include（“app.urls”）,将连接通往子路由系统</li><li>re_path()可以帮助我们匹配更加复杂的路由规则包含正则表达式。</li></ol><h3 id="编写视图函数views-index"><a href="#编写视图函数views-index" class="headerlink" title="编写视图函数views.index"></a>编写视图函数views.index</h3><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208051530473.png"></p><h3 id="项目启动命令"><a href="#项目启动命令" class="headerlink" title="项目启动命令"></a>项目启动命令</h3><ul><li><p>命令行启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py runserver<br></code></pre></td></tr></table></figure></li></ul><h3 id="模板文件templates目录"><a href="#模板文件templates目录" class="headerlink" title="模板文件templates目录"></a>模板文件templates目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_list</span>(<span class="hljs-params">request</span>):<br><span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;user_list.html&quot;</span>) <span class="hljs-comment">#在app目录下的templates目录下寻找该HTML文件</span><br><span class="hljs-comment">#优先在templates目录下寻找</span><br><span class="hljs-comment">#根据app的注册顺序，在每个app下的templates目录中去寻找</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208051602276.png"></p><h3 id="静态文件路径static目录下"><a href="#静态文件路径static目录下" class="headerlink" title="静态文件路径static目录下"></a>静态文件路径static目录下</h3><ul><li>CSS</li><li>图片</li><li>JS</li></ul><p>默认存放在static目录下，在进行调用时候，进行&#x2F;static加完整路径进行调用</p><p>也可在setting.py文件中自行设置</p><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208051712055.png"></p><h2 id="5-DJANGO-模板语法"><a href="#5-DJANGO-模板语法" class="headerlink" title="5. DJANGO 模板语法"></a>5. <em>DJANGO</em> 模板语法</h2><p>本质上：在html中写一些占位符，由数据对这些占位符进行替换和处理。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        &#123;% for i in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>模板中使用特定的模板语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;index.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;data_list&#x27;</span>:[<span class="hljs-string">&#x27;发票&#x27;</span>, <span class="hljs-string">&#x27;海关缴款书&#x27;</span>, <span class="hljs-string">&#x27;代扣代缴&#x27;</span>, <span class="hljs-string">&#x27;农产品加计扣除发票信息&#x27;</span>, <span class="hljs-string">&#x27;农产品加计扣除海关文书&#x27;</span>, <span class="hljs-string">&#x27;异常发票&#x27;</span>]&#125;)<br></code></pre></td></tr></table></figure><p><code>在视图函数，使用json格式进行前后端的交互</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;#&lt;p&gt;过滤器:(|)  将管道符左边的数据当做第一个参数传入过滤器中如果需要第二个参数 则名称后冒号&lt;/p&gt;#&#125;<br>&lt;p&gt;统计长度:&#123;&#123; l|length &#125;&#125;&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>加法运算:&#123;&#123; i|add:123 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认值:&#123;&#123; b|default:&#x27;布尔值为False&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>时间格式:&#123;&#123; ctime|date:&#x27;Y-m-d H:i:s&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>截取字符(包含三个点):&#123;&#123; ss|truncatechars:10 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>截取单词(不包含三个点):&#123;&#123; ss|truncatewords:3 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>转义:&#123;&#123; s1|safe &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标签:其实就是流程控制 if判断  for循环<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&#123;% <span class="hljs-keyword">for</span> foo <span class="hljs-keyword">in</span> s %&#125;<br>    &#123;% <span class="hljs-keyword">if</span> forloop.<span class="hljs-property">first</span> %&#125;<br>        &lt;p&gt;这是第一次循环&lt;/p&gt;<br>    &#123;% elif forloop.<span class="hljs-property">last</span> %&#125;<br>        &lt;p&gt;这是最后一次&lt;/p&gt;<br>    &#123;% <span class="hljs-keyword">else</span> %&#125;<br>        &lt;p&gt;继续!!!&lt;/p&gt;<br>    &#123;% endif %&#125;<br>    &#123;% empty %&#125;<br>        &lt;p&gt;传递过来的数据是空的&lt;/p&gt;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>以下三张</p><p><img src="https://img-blog.csdnimg.cn/65ead6b1b4b74f5f8450fbb495ffc2fc.png"></p><p><img src="https://img-blog.csdnimg.cn/c847a5f7347745bfbaab0cf3f2e91e37.png"></p><p><img src="https://img-blog.csdnimg.cn/c64b5070d7714ea59433c874987e2a82.png"></p><h2 id="6-交互与响应"><a href="#6-交互与响应" class="headerlink" title="6.交互与响应"></a>6.交互与响应</h2><h3 id="request交互对象详解"><a href="#request交互对象详解" class="headerlink" title="request交互对象详解"></a>request交互对象详解</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tcl">Request<br>　　我们知道当URLconf文件匹配到用户输入的路径后，会调用对应的view函数，并将 HttpRequest对象 作为第一个参数传入该函数。<br><br>我们来看一看这个HttpRequest对象有哪些属性或者方法：<br><span class="hljs-number">1</span> HttpRequest.scheme 　 请求的协议，一般为<span class="hljs-keyword">http</span>或者https，字符串格式(以下属性中若无特殊指明，均为字符串格式)<br><br><span class="hljs-number">2</span> HttpRequest.body 　　 <span class="hljs-keyword">http</span>请求的主体，二进制格式。<br><br><span class="hljs-number">3</span> HttpRequest.path 所请求页面的完整路径(但不包括协议以及域名)，也就是相对于网站根目录的路径。<br><br><span class="hljs-number">4</span> HttpRequest.path_info 获取具有 URL 扩展名的资源的附加路径信息。相对于HttpRequest.path，使用该方法便于移植。<br><br><span class="hljs-keyword">if</span> the WSGIScriptAlias <span class="hljs-keyword">for</span> your application is <span class="hljs-keyword">set</span> to “/minfo”, then path might be “/minfo/music/bands/the_beatles/” and path_info would be “/music/bands/the_beatles/”.<br><span class="hljs-number">5</span> HttpRequest.method 获取该请求的方法，比如： GET POST …<br><br><span class="hljs-number">6</span> HttpRequest.<span class="hljs-keyword">encoding</span> 获取请求中表单提交数据的编码。<br><br><span class="hljs-number">7</span> HttpRequest.content_type 获取请求的MIME类型(从CONTENT_TYPE头部中获取)，django1<span class="hljs-number">.10</span>的新特性。<br><br><span class="hljs-number">8</span> HttpRequest.content_params 获取CONTENT_TYPE中的键值对参数，并以字典的方式表示，django1<span class="hljs-number">.10</span>的新特性。<br><br><span class="hljs-number">9</span> HttpRequest.GET 返回一个 querydict 对象(类似于字典，本文最后有querydict的介绍)，该对象包含了所有的HTTP GET参数<br><br><span class="hljs-number">10</span> HttpRequest.POST 返回一个 querydict ，该对象包含了所有的HTTP POST参数，通过表单上传的所有 字符 都会保存在该属性中。<br><br><span class="hljs-number">11</span> HttpRequest.COOKIES 　 返回一个包含了所有cookies的字典。<br><br><span class="hljs-number">12</span> HttpRequest.FILES 　　 返回一个包含了所有的上传文件的 querydict 对象。通过表单所上传的所有 文件 都会保存在该属性中。<br><br>key的值是input标签中name属性的值，value的值是一个UploadedFile对象<br><br><span class="hljs-number">13</span> HttpRequest.META 返回一个包含了所有<span class="hljs-keyword">http</span>头部信息的字典<br><br>View Code<br><span class="hljs-number">14</span> HttpRequest.session 中间件属性<br><br><span class="hljs-number">15</span> HttpRequest.site　　 中间件属性<br><br><span class="hljs-number">16</span> HttpRequest.user　　 中间件属性，表示当前登录的用户。<br></code></pre></td></tr></table></figure><h3 id="响应的方式"><a href="#响应的方式" class="headerlink" title="响应的方式"></a>响应的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse (<span class="hljs-string">&quot;返回内容&quot;</span>)<br><span class="hljs-comment">#HttpResponse 将后面的内容返回</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect (<span class="hljs-string">&quot;https://baidu.com&quot;</span>)<br><span class="hljs-comment">#redirect 重定向到别的网址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_queryset</span>(<span class="hljs-params">klass</span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从模型、管理器或QuerySet中返回一个QuerySet。为了使get_object_or_404和get_list_or_404更加DRY(代码不重复)。</span><br><span class="hljs-string">如果klass不是Modle、Manager或QuerySet，那么就会产生一个ValueError。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_object_or_404</span>(<span class="hljs-params">klass, *args, **kwargs</span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用get()返回一个对象如果对象不存在返回Http404异常。</span><br><span class="hljs-string">klass可能是一个Model、Manager或QuerySet对象; get()查询中使用了参数和关键字参数。</span><br><span class="hljs-string">注意: 就像get()一样，如果有多个返回对象，则返回多个对象。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list_or_404</span>(<span class="hljs-params">klass, *args, **kwargs</span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用filter()返回一个对象列表,如果列表为空则返回一个Http404异常</span><br><span class="hljs-string">klass可能是一个Model、Manager或QuerySet对象。</span><br><span class="hljs-string">filter()查询中使用了参数和关键字参数。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resolve_url</span>(<span class="hljs-params">to, *args, **kwargs</span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">返回一个与所传递参数相对应的URL。</span><br><span class="hljs-string">参数可以是:</span><br><span class="hljs-string">*模型:模型的get_absolute_url()函数将被调用。</span><br><span class="hljs-string">*视图名称，可能带有参数:&#x27; urlresolvers.reverse()将用于反向解析名称。</span><br><span class="hljs-string">*一个URL，它将按原样返回。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h3><p>登陆界面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;login.html&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>django和flask不同，在进行表单校验，多一个&#123;% csrf_token %&#125;安全机制校验，不加校验，无法实现登陆成功的响应。</code></p><h2 id="7-DJANGO-ORM"><a href="#7-DJANGO-ORM" class="headerlink" title="7.DJANGO ORM"></a>7.<em>DJANGO</em> ORM</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mysqlclient==<span class="hljs-number">1.4</span><span class="hljs-number">.1</span> <br></code></pre></td></tr></table></figure><h4 id="1修改配置文件"><a href="#1修改配置文件" class="headerlink" title="1修改配置文件"></a>1修改配置文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在sentting.py</span><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span> : &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span> : <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span> : <span class="hljs-string">&#x27;django_db&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span> : <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span> : <span class="hljs-string">&#x27;123456&#x27;</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span> : <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;POST&#x27;</span> : <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-在models-py创建表类"><a href="#2-在models-py创建表类" class="headerlink" title="2.在models.py创建表类"></a>2.在models.py创建表类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#django底层会根据类，来生成对应的表和字段from django.db import models #继承models.Model</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)                        <span class="hljs-comment"># primary_key = True</span><br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)                    <span class="hljs-comment"># 修改表的时候，可以直接添加一行或去掉。 </span><br>    age = models.IntegerField(default=<span class="hljs-number">2</span>)                          <span class="hljs-comment"># 默认为2</span><br>    <span class="hljs-comment"># data = models.IntegerField(null=True, blank=True)           # 允许为空</span><br>    <span class="hljs-comment"># account = models.DecimalField(max_digits=10, decimal_places=2， default = 0)  # 总长度10位， 小数2位, 默认0.</span><br>    <span class="hljs-comment"># create_time = models.DateTimeField()                        # 时间 </span><br>    <span class="hljs-comment"># on_delete=models.CASCADE 级联删除， models.SET_NULL 设置为空。</span><br>    <span class="hljs-comment"># depart = models.ForeignKey(to=&#x27;Department&#x27;, to_field=&#x27;id&#x27;)  # 生成depart_id字段，和Department的to_field关联</span><br>    <span class="hljs-comment"># gender_choices = (</span><br>    <span class="hljs-comment">#    (1, &quot;男&quot;),</span><br>    <span class="hljs-comment">#    (2, &quot;女&quot;),)</span><br>    <span class="hljs-comment"># gender = models.SmallIntegerField(verbose_name=&quot;性别&quot;, choices=gender_choices)  # 选着约束</span><br><span class="hljs-comment">#django底层会根据类，来生成对应的表和字段</span><br></code></pre></td></tr></table></figure><h4 id="3-执行数据初始化脚本"><a href="#3-执行数据初始化脚本" class="headerlink" title="3.执行数据初始化脚本"></a>3.执行数据初始化脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><h4 id="4-使用orm操作数据库表的数据"><a href="#4-使用orm操作数据库表的数据" class="headerlink" title="4.使用orm操作数据库表的数据"></a>4.使用orm操作数据库表的数据</h4><h5 id="1-orm用法与字段类型"><a href="#1-orm用法与字段类型" class="headerlink" title="1.orm用法与字段类型"></a>1.orm用法与字段类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"> Meta 选项. 没有一个选项是必需的. 是否添加 <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span> 到你的 model 完全是可选的。<br><br><span class="hljs-number">1</span>、db_table <br>本模块在数据库中对应的表的名字:<br><br>db_table = <span class="hljs-string">&quot;pizza_orders&quot;</span><br><br>若不提供该参数, Django 会使用 app_label + <span class="hljs-string">&#x27;_&#x27;</span> + module_name 作为表的名字。<br><br>若表的名字是一个 SQL 保留字, 或包含 Python 变量名不允许的字符--特别是连字符 --没关系. Django 会自动在幕后替你将列名字和表名字用引号引起来.<br><br><span class="hljs-number">2</span>、get_latest_by <br><br>一个 DateField 或 DateTimeField 字段的名字. 若提供该选项, 该模块将拥有一个 get_latest() 函数以得到 <span class="hljs-string">&quot;最新的&quot;</span> 对象(依据那个字段):<br><br>get_latest_by = <span class="hljs-string">&quot;order_date&quot;</span>。<br><br><span class="hljs-number">3</span>、order_with_respect_to <br><br>将该对象标记为可按给定字段排序. This <span class="hljs-keyword">is</span> almost always used <span class="hljs-keyword">with</span> related objects to allow them to be ordered <span class="hljs-keyword">with</span> respect to a parent <span class="hljs-built_in">object</span>. 举例来说, 如果一个 PizzaToppping 关联到一个 Pizza 对象, 你可以使用:<br><br>order_with_respect_to = <span class="hljs-string">&#x27;pizza&#x27;</span><br><br>这就允许 toppings 被排序to be ordered 关于相关的 pizza 对象<br><br><span class="hljs-number">4</span>、ordering <br><br>默认排序字段及排序方式, 用于得到一个对象列表的任何场合:<br><br>ordering = [<span class="hljs-string">&#x27;-order_date&#x27;</span>]<br><br>这是一个 <span class="hljs-built_in">tuple</span> 或一个字符串列表. 每个字符串是一个字段名带及一个可选的前缀 <span class="hljs-string">&quot;-&quot;</span> , 这个前缀表示按降序排序(递减). 若没有这个前缀,则表示按升序排序.字符串 <span class="hljs-string">&quot;?&quot;</span> 表示随机排序.<br><br>举个例子, 要对 pub_date 字段以升序排列, 这样做:<br><br>ordering = [<span class="hljs-string">&#x27;pub_date&#x27;</span>]<br><br>要降序排列, 这样:<br><br>ordering = [<span class="hljs-string">&#x27;-pub_date&#x27;</span>]<br><br>要对 pub_date 降序,然后对 author 升序, 这样:<br><br>ordering = [<span class="hljs-string">&#x27;-pub_date&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>]<br><br>注意一点,不论你使用了多少个字段排序, admin 只使用第一个字段.<br><br><span class="hljs-number">5</span>、permissions <br><br>要创建一个对象所需要的额外的权限. 如果一个对象有 admin 设置, 则每个对象的添加,删除和改变权限会人(依据该选项)自动创建.下面这个例子指定了一个附加权限: can_deliver_pizzas:<br><br>permissions = ((<span class="hljs-string">&quot;can_deliver_pizzas&quot;</span>, <span class="hljs-string">&quot;Can deliver pizzas&quot;</span>),)<br><br>这是一个<span class="hljs-number">2</span>-元素 <span class="hljs-built_in">tuple</span> 的<span class="hljs-built_in">tuple</span>或列表, 其中两<span class="hljs-number">2</span>-元素 <span class="hljs-built_in">tuple</span> 的格式为:(permission_code, human_readable_permission_name). <br><br><span class="hljs-number">6</span>、unique_together <br><br>unique_together = ((<span class="hljs-string">&quot;driver&quot;</span>, <span class="hljs-string">&quot;restaurant&quot;</span>),)<br><br>这是一个字段列表的列表,这些字段的综合值必须是唯一的. 这会在 Django admin 层和数据库层同时做出限制(也就是相关的 UNIQUE 语句会被包括在 CREATE TABLE 语句中).<br><br><span class="hljs-number">7</span>、verbose_name <br><br>是该对象的一个可读性更好的唯一名字:<br><br>verbose_name = <span class="hljs-string">&quot;pizza&quot;</span><br><br>若未提供该选项, Django 则会用一个类名字的 munged 版本来代替: CamelCase becomes camel <span class="hljs-keyword">case</span>.<br><br><span class="hljs-number">8</span>、erbose_name_plural <br><br>对象名字的复数:<br><br>verbose_name_plural = <span class="hljs-string">&quot;stories&quot;</span><br><br>若未提供该选项, Django 会使用 verbose_name + <span class="hljs-string">&quot;s&quot;</span>.<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>orm用法：属性名 = models.字段类型()<br> <br><span class="hljs-number">2.</span>常见字段类型<br>    (<span class="hljs-number">1</span>)AutoField：    自动增长的IntegerField, 不指定时Django会自动创建属性名为<span class="hljs-built_in">id</span>的自动增长属性<br>    (<span class="hljs-number">2</span>)IntegerField： 整数<br>    (<span class="hljs-number">3</span>)FloatField（）：浮点数<br>    (<span class="hljs-number">4</span>)DecimalField(max_digits=<span class="hljs-literal">None</span>, decimal_places=<span class="hljs-literal">None</span>)：可以指定精度的十进制浮点数<br>                                                        max_digits：总位数<br>                                                        decimal_places：小数位数<br>    (<span class="hljs-number">5</span>)CharField(max_length=<span class="hljs-number">20</span>)：字符串（max_length：最大字符个数）<br>                                 必须要指定max_length参数 不指定会直接报错<br>    (<span class="hljs-number">6</span>)TextFiled：         大文本字段，一般超过<span class="hljs-number">4000</span>个字符时使用<br>    (<span class="hljs-number">7</span>)BooleanField：      布尔字段，值为<span class="hljs-literal">True</span>或<span class="hljs-literal">False</span><br>    (<span class="hljs-number">8</span>)NullBooleanField：  支持Null、<span class="hljs-literal">True</span>、<span class="hljs-literal">False</span>三种值                                       <br>    (<span class="hljs-number">9</span>)DateField(auto_now=<span class="hljs-literal">False</span>, auto_now_add=<span class="hljs-literal">False</span>)：日期<br>                参数auto_now：每次保存对象时，自动设置该字段为当前时间，<br>                              用于<span class="hljs-string">&quot;最后一次修改&quot;</span>的时间戳，它总是使用当前日期，默认为false<br>                参数auto_now_add：当对象第一次被创建时自动设置当前时间，<br>                              用于创建的时间戳，它总是使用当前日期，默认为false<br>                注意：参数auto_now_add和auto_now是相互排斥的，组合将会发生错误<br>    (<span class="hljs-number">10</span>)TimeField(auto_now=<span class="hljs-literal">False</span>, auto_now_add=<span class="hljs-literal">False</span>)：时间<br>    (<span class="hljs-number">11</span>)DateTimeField：日期时间<br>    (<span class="hljs-number">12</span>)FileField：上传文件字段，以二进制的形式<br>    (<span class="hljs-number">13</span>)ImageField：继承于FileField，对上传的内容进行校验，确保是有效的图片<br> <br> <br><span class="hljs-number">3.</span>常见字段属性(选项)<br>    (<span class="hljs-number">1</span>)null：如果为<span class="hljs-literal">True</span>，表示允许为空，默认值是<span class="hljs-literal">False</span><br>    (<span class="hljs-number">2</span>)blank：如果为<span class="hljs-literal">True</span>，则该字段允许为空白，默认值是<span class="hljs-literal">False</span>    <br>             对比：null是数据库范畴的概念，blank是表单验证范畴的<br>    (<span class="hljs-number">3</span>)db_column：字段的名称，如果未指定，则使用属性的名称<br>              （只限于数据库表中的名字，操作数据库还是类属性的名字）<br>    (<span class="hljs-number">4</span>)db_index：若值为<span class="hljs-literal">True</span>, 则在表中会为此字段创建索引，默认值是<span class="hljs-literal">False</span>（为了优化查询速度 ）<br>    (<span class="hljs-number">5</span>)default：默认值，这可以是值或可调用对象。如果可调用，则每次创建新对象时都会调用它。<br>    (<span class="hljs-number">6</span>)primary_key：若为<span class="hljs-literal">True</span>，则该字段会成为模型的主键字段，默认值是<span class="hljs-literal">False</span>，一般作为AutoField的选项使用<br>    (<span class="hljs-number">7</span>)unique：如果为<span class="hljs-literal">True</span>, 这个字段在表中必须有唯一值，这个值不能重复，默认值是<span class="hljs-literal">False</span><br>    (<span class="hljs-number">8</span>)verbose_name:该参数是所有字段都有的 就是用来对字段的解释<br> <br> <br><span class="hljs-number">4.</span>关系字段类型(用法与普通字段类型一样)<br>    关系型数据库的关系包括三种类型：<br>        ForeignKey：        一对多，将字段定义在多的一端中<br>        ManyToManyField：   多对多，将字段定义在任意一端中<br>        OneToOneField：     一对一，将字段定义在任意一端中<br> <br> <br><span class="hljs-number">5.</span>字段的的增删改(记得执行数据库迁移的两条命令)：<br>    (<span class="hljs-number">1</span>)字段的增加<br>    a.可以在终端内直接给出默认值<br>        b.该字段可以为空<br>            info = models.CharField(max_length=<span class="hljs-number">32</span>,verbose_name=<span class="hljs-string">&#x27;个人简介&#x27;</span>,null=<span class="hljs-literal">True</span>)<br>        c.直接给字段设置默认值<br>            hobby = models.CharField(max_length=<span class="hljs-number">32</span>,verbose_name=<span class="hljs-string">&#x27;兴趣爱</span><br><span class="hljs-string">好&#x27;</span>,default=<span class="hljs-string">&#x27;study&#x27;</span>)<br>        然后执行数据库迁移的两条命令<br>    (<span class="hljs-number">2</span>)字段的修改<br>   直接修改代码然后执行数据库迁移的两条命令即可！<br>    (<span class="hljs-number">3</span>)字段的删(慎重)<br>   直接注释对应的字段然后执行数据库迁移的两条命令即可！<br>       注意：执行完毕之后字段对应的数据也都没有了<br><span class="hljs-number">6.</span> values和 values_list<br>        user_info = UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=request.GET.get(<span class="hljs-string">&quot;id&quot;</span>)).values(<span class="hljs-string">&quot;字段&quot;</span>) <br>  <span class="hljs-comment"># 规定 字段名的值返回为字典元素</span><br>   valuise_list 规定的为元组<br>                                     <br>                                     <br></code></pre></td></tr></table></figure><h5 id="2-ORM之查询操作-查询集、过滤器"><a href="#2-ORM之查询操作-查询集、过滤器" class="headerlink" title="2.ORM之查询操作(查询集、过滤器)"></a>2.ORM之查询操作(查询集、过滤器)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>基本概念<br>    (<span class="hljs-number">1</span>)查询集：表示从数据库中获取的模型对象集合(objects.),在管理器上调用过滤器方法会返回查询集<br>               查询集可以含有<span class="hljs-number">0</span>个、一个或多个过滤器<br>       查询集特点:a.惰性执行：创建查询集不会访问数据库，直到在模板中调用数据时，才会访问数据库<br>                             调用数据的情况包括迭代、序列化、与<span class="hljs-keyword">if</span>合用<br>                 b.缓存：查询集的结果被存下来之后，再次查询相同数据时会使用之前缓存的数据<br>    (<span class="hljs-number">2</span>)过滤器：基于所给的参数限制查询的结果<br> <br> <br> <br><span class="hljs-number">2.</span>过滤器分两类<br>    (<span class="hljs-number">1</span>)返回列表数据的过滤器：<br>        <span class="hljs-built_in">all</span>()：       返回所有的数据(以对象形式)<br>        <span class="hljs-built_in">filter</span>()：    返回满足条件的数据，括号内可以携带多个参数，参数与参数之间默认是<span class="hljs-keyword">and</span>关系<br>        exclude()：   返回满足条件之外的数据，相当于sql语句中where部分的<span class="hljs-keyword">not</span>关键字<br>        order_by()：  返回排序后的数据<br>        注意：返回的是列表对象，即[数据对象<span class="hljs-number">1</span>,数据对象<span class="hljs-number">2.</span>..]，<br>              获取对象，它支持索引取值和切片操作，但是不支持负数索引<br>              获取第一个对象<span class="hljs-built_in">filter</span>().first()<br>    (<span class="hljs-number">2</span>)返回单个对象的过滤器:<br>        get()：       返回单个满足条件的对象<br>                      <span class="hljs-comment"># 如果未找到会引发&quot;模型类.DoesNotExist&quot;异常</span><br>                      <span class="hljs-comment"># 如果多条被返回，会引发&quot;模型类.MultipleObjectsReturned&quot;异常</span><br>        count()：     返回当前查询的总条数<br>        aggregate()： 聚合<br>        exists()：    判断查询集中是否有数据，如果有则返回<span class="hljs-literal">True</span>，没有则返回<span class="hljs-literal">False</span><br>    (<span class="hljs-number">3</span>)常见过滤器查询：<br>        a.查询<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>的用户名(用exact：判断是否相等)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(id__exact=<span class="hljs-number">1</span>)<br> <br>        b.查询姓名中包含<span class="hljs-string">&#x27;张&#x27;</span>的名字(用contains：是否包含)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(username__contains=<span class="hljs-string">&#x27;张&#x27;</span>)<br> <br>        c.查询姓名中以‘欣’结尾的名字(用startswith/endswith：以什么开头/以什么结尾)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(username__endswith=<span class="hljs-string">&#x27;欣&#x27;</span>)<br> <br>        d.查询姓名不为空的成员(用isnull : 是否为null)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(username__isnull=<span class="hljs-literal">False</span>)<br> <br>        e.查询编号为<span class="hljs-number">2</span>或<span class="hljs-number">4</span>的成员(pk:主键/<span class="hljs-built_in">id</span>) (用<span class="hljs-keyword">in</span>：是否包含在范围内)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(pk__in=[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>])<br> <br>        f.查询编号大于<span class="hljs-number">2</span>的成员（gt:大于、gte:大于等于、lt:小于、lte:小)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(id__gt=<span class="hljs-number">2</span>)<br> <br>        g.查询<span class="hljs-built_in">id</span>不等于３的成员(exclude:条件以外的数据)<br>            usernames = models.User.objects.exclude(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>)<br> <br>        h.查询<span class="hljs-number">2020</span>年注册的成员(year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算)<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(pub_date__year=<span class="hljs-number">2020</span>)<br> <br>        i.查询<span class="hljs-number">2020</span>年<span class="hljs-number">1</span>月<span class="hljs-number">1</span>日后注册的成员<br>            <span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br>            usernames = models.User.objects.<span class="hljs-built_in">filter</span>(pub_date__gt=date(<span class="hljs-number">2020</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br>        h. 多条件查询<br>        data = &#123;<span class="hljs-string">&quot;id&quot;</span>=<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;moible&quot;</span>=<span class="hljs-string">&quot;123&quot;</span>&#125;<br>        usernames = models.User.objects.<span class="hljs-built_in">filter</span>(**data)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">在views.py中对数据库数据的增删改查<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-number">1.</span>查数据<br>    <span class="hljs-comment"># 方式一</span><br>        res = models.User.objects.<span class="hljs-built_in">filter</span>(username=username)<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            返回值你先看成是列表套数据对象的格式</span><br><span class="hljs-string">            它也支持索引取值，切片操作，但是不支持负数索引</span><br><span class="hljs-string">            它也不推荐你使用索引的方式取值</span><br><span class="hljs-string">            user_obj = models.User.objects.filter(username=username).first()</span><br><span class="hljs-string">            filter括号内可以携带多个参数 参数与参数之间默认是and关系</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;userlist.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;user_queryset&#x27;</span>:user_queryset&#125;)    <span class="hljs-comment"># 指定返回</span><br>    <span class="hljs-comment"># 方式二</span><br>        user_queryset = models.User.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;userlist.html&#x27;</span>,<span class="hljs-built_in">locals</span>())    <span class="hljs-comment"># 全部返回</span><br> <br> <br><span class="hljs-number">2.</span>增数据<br>    <span class="hljs-comment"># 方法一：</span><br>    res = models.User.objects.create(username=username,password=password)  <span class="hljs-comment"># 返回值就是当前被创建的对象本身</span><br>    <span class="hljs-comment"># 方法二：</span><br>    user_obj = models.User(username=username,password=password)<br>    user_obj.save()              <span class="hljs-comment"># 保存数据/对象调用save方法</span><br> <br> <br><span class="hljs-number">3.</span>删数据<br>    models.User.objects.<span class="hljs-built_in">filter</span>(id_user=<span class="hljs-number">1</span>).delete()    <span class="hljs-comment"># 指定删除id_user=1的数据</span><br> <br> <br><span class="hljs-number">4.</span>改数据<br>    <span class="hljs-comment"># 方式一：</span><br>    models.User.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=edit_id).update(username=username,password=password)<br>        <span class="hljs-comment"># 将filter查询出来的列表中所有的对象全部更新，批量更新操作，只修改被修改的字段</span><br>    <span class="hljs-comment"># 方式二：</span><br>    edit_obj.username = username<br>    edit_obj.password= password<br>    edit_obj.save()<br>        <span class="hljs-comment"># 用重新赋值方式，全部逐一更换当字段特别多的时候效率会非常的低</span><br>        <span class="hljs-comment"># 因为从头到尾，无论该字段是否被修改都将数据的所有字段全部更新一边 </span><br></code></pre></td></tr></table></figure><h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>(models.Model):<br>    title = models.CharField(verbose_name=<span class="hljs-string">&quot;部门名称&quot;</span>,max_length=<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>,verbose_name=<span class="hljs-string">&quot;姓名&quot;</span>)                        <span class="hljs-comment"># primary_key = True</span><br>    password = models.CharField(verbose_name=<span class="hljs-string">&quot;密码&quot;</span>,max_length=<span class="hljs-number">64</span>)                    <span class="hljs-comment"># 修改表的时候，可以直接添加一行或去掉。</span><br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>)    <span class="hljs-comment"># 默认为2</span><br>    count = models.DecimalField(verbose_name=<span class="hljs-string">&quot;余额&quot;</span>,max_digits=<span class="hljs-number">10</span>,decimal_places=<span class="hljs-number">2</span>,default=<span class="hljs-number">0</span>)<br>    create_time = models.DateTimeField(validators=<span class="hljs-string">&quot;入职时间&quot;</span>)<br>    <span class="hljs-comment"># depart_id = models.BigIntegerField(verbose_name=&quot;部门id&quot;)</span><br>    <span class="hljs-comment">#设置外键</span><br>    deaprt = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>,to_fields=<span class="hljs-string">&quot;id&quot;</span>,on_delete=models.CASCADE)<br>    <span class="hljs-comment">#on_delete 这是数据库外键定义的一个可选项，用来设置当主键表中的被参考列的数据发生变化时，外键表中响应字段的变换规则的。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">on_update 和 on_delete 后面可以跟的词语有四个</span><br><span class="hljs-string">1. no action 表示 不做任何操作，</span><br><span class="hljs-string">2. set null 表示在外键表中将相应字段设置为null</span><br><span class="hljs-string">3. set default 表示设置为默认值</span><br><span class="hljs-string">4. cascade 表示级联操作，就是说，如果主键表中被参考字段更新，外键表中也更新，主键表中的记录被删除，外键表中改行也相应删除</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="7-5-1部门列表"><a href="#7-5-1部门列表" class="headerlink" title="7.5.1部门列表"></a>7.5.1部门列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span><span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mydj/static/bootstrap/dist/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;mydj/static/jquery/dist/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;mydj/static/bootstrap/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>静态文件路径如图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202208161405343.png"></p><ul><li><p>配置文件路径如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">STATIC_URL = &#x27;/static/&#x27;<br><br>STATICFILES_DIRS = [(os.path.join(BASE_DIR, &#x27;static&#x27;))]<br></code></pre></td></tr></table></figure></li><li><p>导入静态文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;bootstrap/dist/css/bootstrap.css&#x27; %&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.navbar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle collapsed&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联通用户管理 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>部门管理 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                &#123;#                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>李洛克<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>个人资料 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我的信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.navbar-collapse --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.container-fluid --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-success &quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#exampleModal&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-eject&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                新建部门<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;exampleModalLabel&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span></span><br><span class="hljs-tag">                                    <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleModalLabel&quot;</span>&gt;</span>新建部门<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/depart/add/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return isempty(&#x27;#deparment-name&#x27;)&quot;</span>&gt;</span><br>                                &#123;% csrf_token %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;recipient-name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label&quot;</span>&gt;</span>部门名称:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deparment-name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart_name&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;message-text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label&quot;</span>&gt;</span>部门人员<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message-text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart_length&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Default panel contents --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-list&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                部门列表<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- Table --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                &#123;% for i in depart_list %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; start_index|add:forloop.counter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; i.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-primary btn-sm&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#exampleModal2&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">data-whatever</span>=<span class="hljs-string">&quot;&#123;&#123; i.title &#125;&#125;&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-danger btn-sm&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/delete/?nid=&#123;&#123; i.id &#125;&#125;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_parent&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleModal2&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;exampleModalLabel&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleModalLabel&quot;</span>&gt;</span>部门名称编辑<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/depart/edit/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deaprt_edit&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return isempty(&#x27;#deparment-name1&#x27;)&quot;</span>&gt;</span><br>                                    &#123;% csrf_token %&#125;<br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;recipient-name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label&quot;</span>&gt;</span>部门名称<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deparment-title&quot;</span>  <span class="hljs-attr">readonly</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;old_depart_name&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;message-text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;control-label&quot;</span>&gt;</span>新部门名称<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deparment-name1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart_name&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>关闭<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">form</span>=<span class="hljs-string">&quot;deaprt_edit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;/jquery/dist/jquery.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;/bootstrap/dist/js/bootstrap.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.huangwx.cn/css/sweetalert.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.huangwx.cn/js/sweetalert-dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isempty</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> res = $(id).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> res2 = $(<span class="hljs-string">&quot;#message-text&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, res2)</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> ((res.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &amp;&amp; (res2.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">swal</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;数据不能为空&quot;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定&quot;</span>&#125;)</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    try &#123;<br>        $(&#x27;#exampleModal2&#x27;).on(&#x27;show.bs.modal&#x27;, function (event) &#123;<br>            var button = $(event.relatedTarget) // Button that triggered the modal<br>            var recipient = button.data(&#x27;whatever&#x27;) // Extract info from data-* attributes<br>            console.log(recipient)<br>            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).<br>            // Update the modal&#x27;s content. We&#x27;ll use jQuery here, but you could use a data binding library or other methods instead.<br>            var modal = $(this)<br>            &#123;#modal.find(&#x27;.modal-title&#x27;).text(&#x27;New message to &#x27; + recipient)#&#125;<br>            modal.find(&#x27;.modal-body input:eq(1)&#x27;).val(recipient)<br>        &#125;)<br>    &#125;catch(error) &#123;<br>        console.log(error)<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>例如下列视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse,redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Department<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> messages<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator<br><br>Create your views here.<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;index.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;data_list&#x27;</span>:[<span class="hljs-string">&#x27;发票&#x27;</span>, <span class="hljs-string">&#x27;海关缴款书&#x27;</span>, <span class="hljs-string">&#x27;代扣代缴&#x27;</span>, <span class="hljs-string">&#x27;农产品加计扣除发票信息&#x27;</span>, <span class="hljs-string">&#x27;农产品加计扣除海关文书&#x27;</span>, <span class="hljs-string">&#x27;异常发票&#x27;</span>]&#125;)<br><span class="hljs-comment">#</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_index</span>(<span class="hljs-params">request</span>):<br>    index =<span class="hljs-number">1</span><br>    page_size = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        index = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;index&quot;</span>,<span class="hljs-number">1</span>))<br>        page_size = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;pagesize&quot;</span>,<span class="hljs-number">3</span>))<br>    query_set = Department.objects.<span class="hljs-built_in">all</span>()<br>    paginator = Paginator(query_set, page_size)<br>    <span class="hljs-keyword">try</span>:<br>        pages = paginator.page(index) <span class="hljs-comment"># 可能请求的页数大于 实际分页数目</span><br>    <span class="hljs-keyword">except</span>:<br>        index = paginator.num_pages <span class="hljs-comment">#针对超出直接返回到最后一页数据</span><br>        last = paginator.num_pages<br>        pages = paginator.page(last)<br>    <span class="hljs-comment"># print(query_set)</span><br>    startindex = page_size*(index-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;depart_list.html&quot;</span>,&#123;<span class="hljs-string">&#x27;depart_list&#x27;</span>:pages,<span class="hljs-string">&quot;start_index&quot;</span>:startindex&#125;)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        depaer_ment=request.POST.get(<span class="hljs-string">&quot;depart_name&quot;</span>)<br>        depart_query = Department.objects.<span class="hljs-built_in">filter</span>(title=depaer_ment)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> depart_query:<br>            Department.objects.create(title=depaer_ment)<br>    <span class="hljs-comment"># time.sleep(2)</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_delete</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(request.path)<br>    nid = request.GET.get(<span class="hljs-string">&quot;nid&quot;</span>)<br>    Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_edit</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method ==<span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        odepart = request.POST.get(<span class="hljs-string">&quot;old_depart_name&quot;</span>)<br>        ndepart = request.POST.get(<span class="hljs-string">&quot;depart_name&quot;</span>)<br>        Department.objects.<span class="hljs-built_in">filter</span>(title=odepart).update(title=ndepart)<br><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br><br><br></code></pre></td></tr></table></figure></li></ul><h5 id="7-5-2模板继承"><a href="#7-5-2模板继承" class="headerlink" title="7.5.2模板继承"></a>7.5.2模板继承</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;!定义模板&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &#123;% block css %&#125; #css模板<br>        <br>    &#123;%endblock%&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;% block content %&#125;<br>        <br>        &#123;%endblock%&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    &#123;% block js %&#125; #js模板<br>        <br>    &#123;%endblock%&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​继承模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;%extneds &#x27;layout.html&#x27;%&#125;<br><br>&#123;% block css %&#125;  自己的css&#123;%endblock%&#125;<br>&#123;% block content %&#125;<br><br>&#123;%endblock%&#125;<br>&#123;% block js %&#125;  自己的js&#123;%endblock%&#125;<br><span class="hljs-comment">&lt;!--继承或者自己重载相关--&gt;</span><br></code></pre></td></tr></table></figure><ul><li>~~~python<br>deaprt &#x3D; models.ForeignKey(to&#x3D;”Department”, to_field&#x3D;”id”, on_delete&#x3D;models.CASCADE,null&#x3D;True)<br>#depart 为两表关键外键<br>title &#x3D; depart.object.filter(depart).title #获取关联表的属性<br>depart.object.filter(depart) #会直接帮你关联到另外一张表的对象<br>#django为我们封装好了 <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##### <span class="hljs-number">7.5</span><span class="hljs-number">.3</span> django 组件<br><br>###### <span class="hljs-number">7.5</span><span class="hljs-number">.3</span><span class="hljs-number">.1</span>django组件<br><br><span class="hljs-number">1.</span> form组件<br><span class="hljs-number">2.</span> modelform组件<br><br>###### <span class="hljs-number">7.5</span><span class="hljs-number">.3</span><span class="hljs-number">.2</span> form组件<br><br>~~~python<br><span class="hljs-keyword">class</span> myform(django.form):<br>    user = form.charField(weight=form.input)<br>    <br>def depart_edit(request):<br>    form = myform() #实例化自己的表单对象<br>    return render(requests,<span class="hljs-string">&quot;/depart/list/&quot;</span>,&#123;<span class="hljs-string">&quot;form&quot;</span>:form&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    &#123;% for i in form %&#125;<br>    &#123;i&#125; 或者 &#123;i.user&#125;<br>    &#123;endfor&#125;i<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$\color{red}{form组件会操成与model大量重复代码 不推荐使用}$</p><h6 id="7-5-3-3-modelform组件"><a href="#7-5-3-3-modelform组件" class="headerlink" title="7.5.3.3   modelform组件"></a>7.5.3.3   <em>modelform</em>组件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#前端用法与form组件相同</span><br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> widgets <span class="hljs-keyword">as</span> wid  <span class="hljs-comment">#因为重名，所以起个别名</span><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>:wid.TextInput(attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;form-control&#x27;</span>&#125;),<br>            <span class="hljs-string">&quot;age&quot;</span>:wid.NumberInput(attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;form-control&#x27;</span>&#125;),<br>            <span class="hljs-string">&quot;email&quot;</span>:wid.EmailInput(attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;form-control&#x27;</span>&#125;)<br>        &#125;<br>  <span class="hljs-comment">#简洁写法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,*args,**kwargs</span>):<br>    <span class="hljs-built_in">super</span>()__init(*args,**kwargs)<br>    <span class="hljs-keyword">for</span> name,field <span class="hljs-keyword">in</span> self.fields.items():<br>        field.wid.attrs = &#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;form-control&#x27;</span>&#125;)<br> <span class="hljs-comment">#添加样式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">userform</span>(<span class="hljs-title class_ inherited__">ModelForm</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = UserInfo<br>        fields =<span class="hljs-string">&quot;__all__&quot;</span><br>        exclude = [<span class="hljs-string">&quot;password&quot;</span>] <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;form-control&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_list</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        student_list = userform()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;student.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;student_list&#x27;</span>:student_list&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        student_list = StudentList(request.POST)<br>        <span class="hljs-keyword">if</span> student_list.is_valid():<br>            student_list.save()<br>        <span class="hljs-keyword">return</span> redirect(request,<span class="hljs-string">&#x27;student_list.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;student_list&#x27;</span>:student_list&#125;)<br>  <span class="hljs-comment">#保存数据的时候，不用挨个取数据了，只需要save一下。</span><br><span class="hljs-comment">#在视图函数当中的 使用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        myform = userform(data=request.POST)<br>        <span class="hljs-keyword">if</span> myform.is_valid():<br>            myform.save()<br>            <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;处理完成&quot;</span>&#125;)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(myform.errors)<br>            <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;处理失败 &quot;</span>,<span class="hljs-string">&quot;error_message&quot;</span>:myform.errors&#125;)<br>        <span class="hljs-comment">#直接存储数据 或者修改数据 </span><br>        myform = userform(data=request.POST, instance=user_info.first())<br>        myform.save()<br>        <br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    &#123;% for i in form %&#125;<br>    &#123;&#123;i&#125;&#125; 或者 &#123;&#123;i.user&#125;&#125;<br>    &#123;&#123;i.label&#125;&#125; 显示数据库里面的verbose_name<br>    &#123;endfor&#125;i<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="7-6-用户登录验证"><a href="#7-6-用户登录验证" class="headerlink" title="7.6. 用户登录验证"></a>7.6. 用户登录验证</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正则校验手机号码</span><br><span class="hljs-keyword">from</span> django.core.validators <span class="hljs-keyword">import</span> RegexValidator<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myfrom</span>(<span class="hljs-title class_ inherited__">modelform</span>):<br>    xx= form.chidel(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment"># 定义model没有的字段</span><br>    moible = forms.CharField(label = <span class="hljs-string">&quot;手机号码&quot;</span>，validators=[RegexValidator(<span class="hljs-string">r&quot;^159[0-9]+$&quot;</span>,<span class="hljs-string">&#x27;号码必须以159开头 &#x27;</span>)])<br><span class="hljs-string">&quot;&quot;&quot;    </span><br><span class="hljs-string">1.字段规则校验，字符长度，是否必填等基本校验</span><br><span class="hljs-string">    2.validators校验（RegexValidator校验器或自定义校验函数）</span><br><span class="hljs-string">    3.局部钩子（类中定义的以clean_字段名命名的函数，校验正常必须返回该字段的值self.cleaned_data.get(‘name’)）</span><br><span class="hljs-string">    4.全局钩子（类中定义的函数名clean，校验正常必须返回该对象的校验结果值return self.cleaned_data）</span><br><span class="hljs-string">    5.每一步通过校验单结果都以字典形式保存在类对象的cleaned_data属性中</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_city</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 局部钩子定义在modelform初始化的时候</span><br>        <span class="hljs-string">&quot;&quot;&quot;局部钩子判断城市必须是北京/上海/深圳其中一个&quot;&quot;&quot;</span><br>        city_val = self.cleaned_data.get(<span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> city_val <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>]:<br>            <span class="hljs-keyword">return</span> city_val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> forms.ValidationError(<span class="hljs-string">&#x27;城市只能选:北京/上海/深圳&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#分页操作 </span><br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator <span class="hljs-comment">#导入分页类</span><br>    query_set = Department.objects.<span class="hljs-built_in">all</span>()<br>    paginator = Paginator(query_set, page_size) <span class="hljs-comment">#query_set model对象，page_size 每页数量</span><br>    pages = paginator.page(index) <span class="hljs-comment"># index 代表 pages是显示第几页</span><br>    <br><span class="hljs-comment">#json 格式化model对象</span><br><span class="hljs-keyword">from</span> django.core <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse <span class="hljs-comment"># </span><br>user_info = UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=request.GET.get(<span class="hljs-string">&quot;id&quot;</span>)).values(<span class="hljs-string">&quot;字段&quot;</span>)<br>    user_info = UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=request.GET.get(<span class="hljs-string">&quot;id&quot;</span>))<br>    user_json = serializers.serialize(<span class="hljs-string">&quot;json&quot;</span>,user_info)<br>      <br>        <span class="hljs-comment">#会将查询到的modesl对象转换成json</span><br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;处理完成&quot;</span>,<span class="hljs-string">&quot;user_info&quot;</span>:user_json&#125;)<br>    <span class="hljs-comment">#这边也可以不用serializers方法 用first()可以直接放进json中</span><br></code></pre></td></tr></table></figure><h6 id="cookie和session-设置"><a href="#cookie和session-设置" class="headerlink" title="cookie和session 设置"></a>cookie和session 设置</h6><ol><li>使用Django框架自带的”request.user.is_authenticated()”方法来判断用户是否登录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> request.user.is_authenticated():<br><span class="hljs-comment"># 如果登录返回用户想去的页面</span><br><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;用户想去页面&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 未登录, 重定向到用户登录页面</span><br><span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&quot;登录页面&quot;</span>))<br></code></pre></td></tr></table></figure><ol start="2"><li>使用Django自带的login_required装饰器(内部就是封装了is_authenticated())判断用户是否登录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.需要在Django的settings配置文件中添加如果验证登录未通过需要跳转的路径</span><br><span class="hljs-keyword">from</span> django.contrib.auth.decorators <span class="hljs-keyword">import</span> login_required<br><span class="hljs-meta">@login_required</span><br>LOGIN_URL = <span class="hljs-string">&quot;/login/&quot;</span><br></code></pre></td></tr></table></figure><p>cookie 和session设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.session[] = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#相当于是字典操作</span><br></code></pre></td></tr></table></figure><p>前端ajax如何绕过ajdngo  csrf认证</p><ol><li><p>读取浏览器cookie当中的csrf字段</p></li><li><p>忽略部分view 的csrf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">request</span>)<br><span class="hljs-comment">#被装饰的函数将不会进行csrf认证</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="8-Django路由与视图详解"><a href="#8-Django路由与视图详解" class="headerlink" title="8. Django路由与视图详解"></a>8. <em>Django</em>路由与视图详解</h2><h3 id="8-1-path-与-re-path-路由函数"><a href="#8-1-path-与-re-path-路由函数" class="headerlink" title="8.1 path 与 re_path 路由函数"></a>8.1 path 与 re_path 路由函数</h3><p>re_path函数对比path，可以实现更加复杂的正则表达式路由规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">path（<span class="hljs-string">&#x27;app2/&lt;uuid:id&gt;&#x27;</span>,view.show_uuid,name=<span class="hljs-string">&quot;show_uuid&quot;</span>）<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">path 正则参数</span><br><span class="hljs-string"> str : 任意非空字符，不包含“/”,默认类型</span><br><span class="hljs-string"> int : 匹配0和任意整数</span><br><span class="hljs-string"> slug ：匹配任意ASCⅡ字符、连接线和下划线</span><br><span class="hljs-string"> uuid ： 匹配一个uuid格式的字符串，该对象必须包含“-”，所有字母必须小写。比如22221111-abcd-3cww-3321-123456789123</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>re_path(<span class="hljs-string">&#x27;app2/list/(?&lt;year&gt;\d&#123;4&#125;)/&#x27;</span>,view.article.<span class="hljs-built_in">list</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">所用规则与正则表达式无差别</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>此上两种方法关键参数都是在&lt;&gt;中<br>path(&lt;<span class="hljs-built_in">type</span>:<span class="hljs-built_in">type</span>&gt;)<br>re_path(<span class="hljs-string">&#x27;(?&lt;name&gt;\d&#123;4&#125;)&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="8-2-反向路由解析器"><a href="#8-2-反向路由解析器" class="headerlink" title="8.2 反向路由解析器"></a>8.2 反向路由解析器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path（<span class="hljs-string">&#x27;app2/&lt;uuid:id&gt;&#x27;</span>,view.show_uuid,name=<span class="hljs-string">&quot;show_uuid&quot;</span>）<br></code></pre></td></tr></table></figure><p>name可以在HTML中使用，根据name得到url地址。好处是name不变，url可以随意修改。</p><p>reverse() 方法 可以根据name 反向解析出这个name代表的URL</p><h3 id="8-3-视图函数的底层处理"><a href="#8-3-视图函数的底层处理" class="headerlink" title="8.3 视图函数的底层处理"></a>8.3 视图函数的底层处理</h3><ol><li><p>HttpRequest 和 HttpResponse 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># HttpRequest对象</span><br>path  字符串，便是请求页面的路径，不包含域名<br>method 字符串，表示页面请求的方式。必须以大写方式<br>encoding 字符串，表示提交的数据的编码方式<br>GET 字典类型，包含GET请求方法中的所有参数<br>POSt 字典类型，包含POSt请求方法中的所有参数<br>FILE 字典类型，包含上传文件的信息<br>COOKIES 字典类型，包含所有的cookie对象<br>session 字典类型，表示当前会话<br>META 字典类型，包含所有的HTTP头部信息，如HTTP_USER_AGENT、REMOTE_ADDR<br>user 表示当前登录用户<br><br></code></pre></td></tr></table></figure></li><li><p>HttpResposne </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">常见参数</span><br><span class="hljs-string">content 返回的内容</span><br><span class="hljs-string">status_code 返回的HTTP响应状态吗</span><br><span class="hljs-string">content-type 返回的数据的MIME类型，默认为text/html</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="8-4-视图处理函数的使用"><a href="#8-4-视图处理函数的使用" class="headerlink" title="8.4 视图处理函数的使用"></a>8.4 视图处理函数的使用</h3><ol><li><p>render()函数</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcts <span class="hljs-keyword">import</span> render<br>render(request,template_name,content=<span class="hljs-literal">None</span>,content_type=<span class="hljs-literal">None</span>,status=<span class="hljs-literal">None</span>，using=<span class="hljs-literal">None</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">content: 字典类型，保存要传到html的变量</span><br><span class="hljs-string">status: 表示响应的状态代码，默认为200</span><br><span class="hljs-string">content_type: 用于生成文档的MIME类型，默认为text/html</span><br><span class="hljs-string">using：设置末班引擎，用于解析模板文件</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>redict()函数<br>重定向的三种方式</p><ol><li><p>通过调用模板的get_absolute_url()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name=models.CharField(max_length=<span class="hljs-number">32</span>)                        <span class="hljs-comment"># primary_key = True</span><br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)                    <span class="hljs-comment"># 修改表的时候，可以直接添加一行或去掉。 </span><br>    age = models.IntegerField(default=<span class="hljs-number">2</span>)  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_absolute_url</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-string">&quot;url&quot;</span>,kwargs=&#123;<span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-string">&quot;self.id&quot;</span>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>通过路由反向解析进行重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redict_view</span>(<span class="hljs-params">request,<span class="hljs-built_in">id</span></span>):<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-built_in">id</span>)<br></code></pre></td></tr></table></figure></li><li><p>通过绝对的或者相对的url进行重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DJANGO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2022/10/29/VUE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/10/29/VUE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE单文件调试"><a href="#VUE单文件调试" class="headerlink" title="VUE单文件调试"></a><em>VUE</em>单文件调试</h1><h2 id="快速原型开发（单个vue文件调试）"><a href="#快速原型开发（单个vue文件调试）" class="headerlink" title="快速原型开发（单个vue文件调试）"></a>快速原型开发（单个vue文件调试）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install -g vue-cli@4<br><br>npm install -g @vue/cli-service-global<br><br>npm i -g eslint &lt;!-- 防止vue文件调用js报错--&gt;<br><br>npm install vue-template-compiler <br>npm init <br>vue serve test.vue<br></code></pre></td></tr></table></figure><p>运行效果如图</p><p><img src="https://cdn.jsdelivr.net/gh/mrthere3/typora_note/img/js/202209281213803.png"></p><h1 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h1><h2 id="类与样式绑定"><a href="#类与样式绑定" class="headerlink" title="类与样式绑定"></a>类与样式绑定</h2><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。因为 class 和 style 都是 attribute，我们可以和其他 attribute 一样使用 v-bind 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，Vue 专门为 class 和 style 的 v-bind 用法提供了特殊的功能增强。除了字符串外，表达式的值也可以是对象或数组。</p><p>我们可以给 <code>:class</code> (<code>v-bind:class</code> 的缩写) 传递一个对象来动态切换 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div :class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面的语法表示 <code>active</code> 是否存在取决于数据属性 <code>isActive</code> 的真假。</p><h3 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h3><p>我们可以给 <code>:class</code> 绑定一个数组来渲染多个 CSS class：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br>    <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span><br>  &#125;<br>&#125;<br>&lt;div :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>渲染的结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>配合三元表达式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div :class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><p>:style 支持绑定 JavaScript 对象值，对应的是 HTML 元素的 style 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">30</span><br>  &#125;<br>&#125;<br>&lt;div :style=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>尽管推荐使用 camelCase，但 <code>:style</code> 也支持 kebab-cased 形式的 CSS 属性 key (对应其 CSS 中的实际名称)，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div :style=&quot;&#123; &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>直接绑定一个样式对象通常是一个好主意，这样可以使模板更加简洁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">styleObject</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;13px&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;div :style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><code>v-else</code></h3><p>你也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;awesome = !awesome&quot;&gt;Toggle&lt;/button&gt;<br><br>&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;<br>&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><code>v-else-if</code></h3><p>顾名思义，v-else-if 提供的是相应于 v-if 的“else if 区块”。它可以连续多次重复使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div v-if=&quot;type === &#x27;A&#x27;&quot;&gt;<br>  A<br>&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;<br>  B<br>&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;C&#x27;&quot;&gt;<br>  C<br>&lt;/div&gt;<br>&lt;div v-else&gt;<br>  Not A/B/C<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>和 v-else 类似，一个使用 v-else-if 的元素必须紧跟在一个 v-if 或一个 v-else-if 元素后面。</p><h3 id="lt-template-gt-上的-v-if"><a href="#lt-template-gt-上的-v-if" class="headerlink" title="&lt;template&gt; 上的 v-if"></a><code>&lt;template&gt;</code> 上的 <code>v-if</code></h3><p>因为 <code>v-if</code> 是一个指令，他必须依附于某个元素。但如果我们想要切换不止一个元素呢？在这种情况下我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code>，这只是一个不可见的包装器元素，最后渲染的结果并不会包含这个 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template v-if=&quot;ok&quot;&gt;<br>  &lt;h1&gt;Title&lt;/h1&gt;<br>  &lt;p&gt;Paragraph 1&lt;/p&gt;<br>  &lt;p&gt;Paragraph 2&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><p>另一个可以用来按条件显示一个元素的指令是 v-show。其用法基本一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>不同之处在于 v-show 会在 DOM 渲染中保留该元素；v-show 仅切换了该元素上名为 display 的 CSS 属性。</p><p>v-show 不支持在 <code>template</code>元素上使用，也不能和 v-else 搭配使用。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h3><p>我们可以使用 v-for 指令基于一个数组来渲染一个列表。v-for 指令的值需要使用 item in items 形式的特殊语法，其中 items 是源数据的数组，而 item 是迭代项的别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    items: [&#123; message: &#x27;Foo&#x27; &#125;, &#123; message: &#x27;Bar&#x27; &#125;]<br>  &#125;<br>&#125;<br>&lt;li v-for=&quot;item in items&quot;&gt;<br>  &#123;&#123; item.message &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>在 v-for 块中可以完整地访问父作用域内的属性和变量。v-for 也支持使用可选的第二个参数表示当前项的位置索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">parentMessage</span>: <span class="hljs-string">&#x27;Parent&#x27;</span>,<br>    <span class="hljs-attr">items</span>: [&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li v-for=&quot;(item, index) in items&quot;&gt;<br>  &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>对于多层嵌套的 v-for，作用域的工作方式和函数的作用域很类似。每个 v-for 作用域都可以访问到父级作用域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li v-for=&quot;item in items&quot;&gt;<br>  &lt;span v-for=&quot;childItem in item.children&quot;&gt;<br>    &#123;&#123; item.message &#125;&#125; &#123;&#123; childItem &#125;&#125;<br>  &lt;/span&gt;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>你也可以使用 of 作为分隔符来替代 in，这更接近 JavaScript 的迭代器语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="v-for-与对象"><a href="#v-for-与对象" class="headerlink" title="v-for 与对象"></a><code>v-for</code> 与对象</h3><p>你也可以使用 <code>v-for</code> 来遍历一个对象的所有属性。遍历的顺序会基于对该对象调用 <code>Object.keys()</code> 的返回值来决定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    myObject: &#123;<br>      title: &#x27;How to do lists in Vue&#x27;,<br>      author: &#x27;Jane Doe&#x27;,<br>      publishedAt: &#x27;2016-04-10&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;ul&gt;<br>  &lt;li v-for=&quot;value in myObject&quot;&gt;<br>    &#123;&#123; value &#125;&#125; &lt;!--value表示属性值--&gt; <br>  &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>可以通过提供第二个参数表示属性名 (例如 key)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li v-for=&quot;(value, key) in myObject&quot;&gt;<br>  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>第三个参数表示位置索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;li v-for=&quot;(value, key, index) in myObject&quot;&gt;<br>  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;<br>&lt;/li&gt;<br><br></code></pre></td></tr></table></figure><h3 id="在-v-for-里使用范围值"><a href="#在-v-for-里使用范围值" class="headerlink" title="在 v-for 里使用范围值"></a>在 <code>v-for</code> 里使用范围值</h3><p>v-for 可以直接接受一个整数值。在这种用例中，会将该模板基于 1…n 的取值范围重复多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>注意此处 n 的初值是从 1 开始而非 0。</p><h3 id="lt-template-gt-上的-v-for"><a href="#lt-template-gt-上的-v-for" class="headerlink" title="&lt;template&gt; 上的 v-for"></a><code>&lt;template&gt;</code> 上的 <code>v-for</code></h3><p>与模板上的 <code>v-if</code> 类似，你也可以在 <code>&lt;template&gt;</code> 标签上使用 <code>v-for</code> 来渲染一个包含多个元素的块。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ul&gt;<br>  &lt;template v-for=&quot;item in items&quot;&gt;<br>    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;<br>    &lt;li class=&quot;divider&quot; role=&quot;presentation&quot;&gt;&lt;/li&gt;<br>  &lt;/template&gt;<br>&lt;/ul&gt;<br><br></code></pre></td></tr></table></figure><h3 id="v-for-与-v-if"><a href="#v-for-与-v-if" class="headerlink" title="v-for 与 v-if"></a><code>v-for</code> 与 <code>v-if</code></h3><p>当它们同时存在于一个节点上时，<code>v-if</code> 比 <code>v-for</code> 的优先级更高。这意味着 <code>v-if</code> 的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--<br> 这会抛出一个错误，因为属性 todo 此时<br> 没有在该实例上定义<br>--&gt;<br>&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;<br>  &#123;&#123; todo.name &#125;&#125;<br>&lt;/li&gt;<br>&lt;!--<br> 这会抛出一个错误，因为属性 todo 此时<br> 没有在该实例上定义<br>--&gt;<br>&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;<br>  &#123;&#123; todo.name &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h2 id="事件处理v-on"><a href="#事件处理v-on" class="headerlink" title="事件处理v-on"></a>事件处理<code>v-on</code></h2><h3 id="监听事件v-on"><a href="#监听事件v-on" class="headerlink" title="监听事件v-on"></a>监听事件<code>v-on</code></h3><p>我们可以使用 <code>v-on</code> 指令 (简写为 <code>@</code>) 来监听 DOM 事件，并在事件触发时执行对应的 JavaScript。用法：<code>v-on:click=&quot;methodName&quot;</code> 或 <code>@click=&quot;handler&quot;</code>。</p><p>事件处理器的值可以是：</p><ol><li><p><strong>内联事件处理器</strong>：事件被触发时执行的内联 JavaScript 语句 (与 <code>onclick</code> 类似)。</p></li><li><p><strong>方法事件处理器</strong>：一个指向组件上定义的方法的属性名或是路径。     </p><hr></li></ol><h3 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h3><p>内联事件处理器通常用于简单场景，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    count: 0<br>  &#125;<br>&#125;<br>&lt;button @click=&quot;count++&quot;&gt;Add 1&lt;/button&gt;<br>&lt;p&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h3><p>随着事件处理器的逻辑变得愈发复杂，内联代码方式变得不够灵活。因此 v-on 也可以接受一个方法名或对某个方法的调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    name: &#x27;Vue.js&#x27;<br>  &#125;<br>&#125;,<br>methods: &#123;<br>  greet(event) &#123;<br>    // 方法中的 `this` 指向当前活跃的组件实例<br>    alert(`Hello $&#123;this.name&#125;!`)<br>    // `event` 是 DOM 原生事件<br>    if (event) &#123;<br>      alert(event.target.tagName)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;!-- `greet` 是上面定义过的方法名 --&gt;<br>&lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;<br><br></code></pre></td></tr></table></figure><h3 id="方法与内联事件判断"><a href="#方法与内联事件判断" class="headerlink" title="方法与内联事件判断"></a>方法与内联事件判断</h3><p>模板编译器会通过检查 v-on 的值是否是合法的 JavaScript 标识符或属性访问路径来断定是何种形式的事件处理器。举例来说，foo、foo.bar 和 foo[‘bar’] 会被视为方法事件处理器，而 foo() 和 count++ 会被视为内联事件处理器</p><h3 id="在内联处理器中调用方法"><a href="#在内联处理器中调用方法" class="headerlink" title="在内联处理器中调用方法"></a>在内联处理器中调用方法</h3><p>除了直接绑定方法名，你还可以在内联事件处理器中调用方法。这允许我们向方法传入自定义参数以代替原生事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>  say(message) &#123;<br>    alert(message)<br>  &#125;<br>&#125;<br>&lt;button @click=&quot;say(&#x27;hello&#x27;)&quot;&gt;Say hello&lt;/button&gt;<br>&lt;button @click=&quot;say(&#x27;bye&#x27;)&quot;&gt;Say bye&lt;/button&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="在内联事件处理器中访问事件参数"><a href="#在内联事件处理器中访问事件参数" class="headerlink" title="在内联事件处理器中访问事件参数"></a>在内联事件处理器中访问事件参数</h3><p>有时我们需要在内联事件处理器中访问原生 DOM 事件。你可以向该处理器方法传入一个特殊的 <code>$event</code> 变量，或者使用内联箭头函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用特殊的 $event 变量 --&gt;<br>&lt;button @click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;&gt;<br>  Submit<br>&lt;/button&gt;<br><br>&lt;!-- 使用内联箭头函数 --&gt;<br>&lt;button @click=&quot;(event) =&gt; warn(&#x27;Form cannot be submitted yet.&#x27;, event)&quot;&gt;<br>  Submit<br>&lt;/button&gt;<br>methods: &#123;<br>  warn(message, event) &#123;<br>    // 这里可以访问 DOM 原生事件<br>    if (event) &#123;<br>      event.preventDefault()<br>    &#125;<br>    alert(message)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>在处理事件时调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好。</p><p>为解决这一问题，Vue 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是用 <code>.</code> 表示的指令后缀，包含以下这些：</p><ul><li><p><code>.stop</code></p></li><li><p><code>.prevent</code></p></li><li><p><code>.self</code></p></li><li><p><code>.capture</code></p></li><li><p><code>.once</code></p></li><li><p><code>.passive</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 单击事件将停止传递 --&gt;<br>&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 提交事件将不再重新加载页面 --&gt;<br>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;<br><br>&lt;!-- 修饰语可以使用链式书写 --&gt;<br>&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 也可以只有修饰符 --&gt;<br>&lt;form @submit.prevent&gt;&lt;/form&gt;<br><br>&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;<br>&lt;!-- 例如：事件处理器不来自子元素 --&gt;<br>&lt;div @click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><hr><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许在 <code>v-on</code> 或 <code>@</code> 监听按键事件时添加按键修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 仅在 `key` 为 `Enter` 时调用 `submit` --&gt;<br>&lt;input @keyup.enter=&quot;submit&quot; /&gt;<br></code></pre></td></tr></table></figure><p>你可以直接使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input @keyup.page-down=&quot;onPageDown&quot; /&gt;<br></code></pre></td></tr></table></figure><p>在上面的例子中，仅会在 <code>$event.key</code> 为 <code>&#39;PageDown&#39;</code> 时调用事件处理。</p><h3 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名</h3><p>Vue 为一些常用的按键提供了别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“Delete”和“Backspace”两个按键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h3 id="系统按键修饰符"><a href="#系统按键修饰符" class="headerlink" title="系统按键修饰符"></a>系统按键修饰符</h3><p>你可以使用以下系统按键修饰符来触发鼠标或键盘事件监听器，只有当按键被按下时才会触发。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>注意</p><p>在 Mac 键盘上，meta 是 Command 键 (⌘)。在 Windows 键盘上，meta 键是 Windows 键 (⊞)。在 Sun 微机系统键盘上，meta 是钻石键 (◆)。在某些键盘上，特别是 MIT 和 Lisp 机器的键盘及其后代版本的键盘，如 Knight 键盘，space-cadet 键盘，meta 都被标记为“META”。在 Symbolics 键盘上，meta 也被标识为“META”或“Meta”。</p><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h3><p><code>.exact</code> 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;<br>&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;<br><br>&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;<br>&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;<br><br>&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;<br>&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;<br><br></code></pre></td></tr></table></figure><hr><h3 id="鼠标按键修饰符"><a href="#鼠标按键修饰符" class="headerlink" title="鼠标按键修饰符"></a>鼠标按键修饰符</h3><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符将处理程序限定为由特定鼠标按键触发的事件。</p><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>在前端处理表单时，我们常常需要将表单输入框的内容同步给 JavaScript 中相应的变量。手动连接值绑定和更改事件监听器可能会很麻烦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  :value=&quot;text&quot;<br>  @input=&quot;event =&gt; text = event.target.value&quot;&gt;<br><br></code></pre></td></tr></table></figure><p><code>v-model</code> 指令帮我们简化了这一步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input v-model=&quot;text&quot;&gt;<br><br></code></pre></td></tr></table></figure><p>另外，<code>v-model</code> 还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。它会根据所使用的元素自动使用对应的 DOM 属性和事件组合：</p><ul><li>文本类型的 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会绑定 <code>value</code> property 并侦听 <code>input</code> 事件；</li><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 会绑定 <code>checked</code> property 并侦听 <code>change</code> 事件；</li><li><code>&lt;select&gt;</code> 会绑定 <code>value</code> property 并侦听 <code>change</code> 事件</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;<br>&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;span&gt;Multiline message is:&lt;/span&gt;<br>&lt;p style=&quot;white-space: pre-line;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;<br>&lt;textarea v-model=&quot;message&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;<br><br></code></pre></td></tr></table></figure><p>注意在 <code>&lt;textarea&gt;</code> 中是不支持插值表达式的。请使用 <code>v-model</code> 来替代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 错误 --&gt;<br>&lt;textarea&gt;&#123;&#123; text &#125;&#125;&lt;/textarea&gt;<br><br>&lt;!-- 正确 --&gt;<br>&lt;textarea v-model=&quot;text&quot;&gt;&lt;/textarea&gt;<br><br></code></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单一的复选框，绑定布尔类型值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot; /&gt;<br>&lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;<br><br></code></pre></td></tr></table></figure><p>我们也可以将多个复选框绑定到同一个数组或集合的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">export default &#123;<br>  data() &#123;<br>    return &#123;<br>      checkedNames: []<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;div&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/div&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;<br>&lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;<br>&lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;<br>&lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;<br><br></code></pre></td></tr></table></figure><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/div&gt;<br><br>&lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot; /&gt;<br>&lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;<br><br>&lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot; /&gt;<br>&lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;<br><br></code></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>单个选择器的示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br><br>&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option disabled value=&quot;&quot;&gt;Please select one&lt;/option&gt;<br>  &lt;option&gt;A&lt;/option&gt;<br>  &lt;option&gt;B&lt;/option&gt;<br>  &lt;option&gt;C&lt;/option&gt;<br>&lt;/select&gt;<br><br></code></pre></td></tr></table></figure><p>多选 (值绑定到一个数组)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br><br>&lt;select v-model=&quot;selected&quot; multiple&gt;<br>  &lt;option&gt;A&lt;/option&gt;<br>  &lt;option&gt;B&lt;/option&gt;<br>  &lt;option&gt;C&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>选择器的选项可以使用 <code>v-for</code> 动态渲染：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">export default &#123;<br>  data() &#123;<br>    return &#123;<br>      selected: &#x27;A&#x27;,<br>      options: [<br>        &#123; text: &#x27;One&#x27;, value: &#x27;A&#x27; &#125;,<br>        &#123; text: &#x27;Two&#x27;, value: &#x27;B&#x27; &#125;,<br>        &#123; text: &#x27;Three&#x27;, value: &#x27;C&#x27; &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option v-for=&quot;option in options&quot; :value=&quot;option.value&quot;&gt;<br>    &#123;&#123; option.text &#125;&#125;<br>  &lt;/option&gt;<br>&lt;/select&gt;<br><br>&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><h4 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h4><p>对于单选按钮，复选框和选择器选项，<code>v-model</code> 绑定的值通常是静态的字符串 (或者对复选框是布尔值)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- `picked` 在被选择时是字符串 &quot;a&quot; --&gt;<br>&lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot; /&gt;<br><br>&lt;!-- `toggle` 只会为 true 或 false --&gt;<br>&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; /&gt;<br><br>&lt;!-- `selected` 在第一项被选中时为字符串 &quot;abc&quot; --&gt;<br>&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;<br>&lt;/select&gt;<br><br></code></pre></td></tr></table></figure><p>但有时我们可能希望将该值绑定到当前组件实例上的动态数据。这可以通过使用 <code>v-bind</code> 来实现。此外，使用 <code>v-bind</code> 还使我们可以将选项值绑定为非字符串的数据类型。</p><h4 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  type=&quot;checkbox&quot;<br>  v-model=&quot;toggle&quot;<br>  true-value=&quot;yes&quot;<br>  false-value=&quot;no&quot; /&gt;<br><br></code></pre></td></tr></table></figure><p><code>true-value</code> 和 <code>false-value</code> 是 Vue 特有的 attributes，仅支持和 <code>v-model</code> 配套使用。这里 <code>toggle</code> 属性的值会在选中时被设为 <code>&#39;yes&#39;</code>，取消选择时设为 <code>&#39;no&#39;</code>。你同样可以通过 <code>v-bind</code> 将其绑定为其他动态值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  type=&quot;checkbox&quot;<br>  v-model=&quot;toggle&quot;<br>  :true-value=&quot;dynamicTrueValue&quot;<br>  :false-value=&quot;dynamicFalseValue&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h4 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; :value=&quot;first&quot; /&gt;<br>&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; :value=&quot;second&quot; /&gt;<br><br></code></pre></td></tr></table></figure><p><code>pick</code> 会在第一个按钮选中时被设为 <code>first</code>，在第二个按钮选中时被设为 <code>second</code>。</p><h4 id="选择器选项"><a href="#选择器选项" class="headerlink" title="选择器选项"></a>选择器选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;!-- 内联对象字面量 --&gt;<br>  &lt;option :value=&quot;&#123; number: 123 &#125;&quot;&gt;123&lt;/option&gt;<br>&lt;/select&gt;<br><br></code></pre></td></tr></table></figure><p><code>v-model</code> 同样也支持非字符串类型的值绑定！在上面这个例子中，当某个选项被选中，<code>selected</code> 会被设为该对象字面量值 <code>&#123; number: 123 &#125;</code>。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h5><p>默认情况下，<code>v-model</code> 会在每次 <code>input</code> 事件后更新数据 (<a href="https://cn.vuejs.org/guide/essentials/forms.html#vmodel-ime-tip">IME 拼字阶段的状态</a>例外)。你可以添加 <code>lazy</code> 修饰符来改为在每次 <code>change</code> 事件后更新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;<br>&lt;input v-model.lazy=&quot;msg&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h5 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h5><p>如果你想让用户输入自动转换为数字，你可以在 <code>v-model</code> 后添加 <code>.number</code> 修饰符来管理输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input v-model.number=&quot;age&quot; /&gt;<br></code></pre></td></tr></table></figure><p>如果该值无法被 <code>parseFloat()</code> 处理，那么将返回原始值。</p><p><code>number</code> 修饰符会在输入框有 <code>type=&quot;number&quot;</code> 时自动启用。</p><h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h5><p>如果你想要默认自动去除用户输入内容中两端的空格，你可以在 <code>v-model</code> 后添加 <code>.trim</code> 修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input v-model.trim=&quot;msg&quot; /&gt;<br></code></pre></td></tr></table></figure><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><h3 id="注册周期钩子"><a href="#注册周期钩子" class="headerlink" title="注册周期钩子"></a>注册周期钩子</h3><p>举例来说，<code>mounted</code> 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the component is now mounted.`</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有其他一些钩子，会在实例生命周期的不同阶段被调用，最常用的是 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted"><code>mounted</code></a>、<a href="https://cn.vuejs.org/api/options-lifecycle.html#updated"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/api/options-lifecycle.html#unmounted"><code>unmounted</code></a>。</p><p>所有生命周期钩子函数的 <code>this</code> 上下文都会自动指向当前调用它的组件实例。注意：避免用箭头函数来定义生命周期钩子，因为如果这样的话你将无法在函数中通过 <code>this</code> 获取组件实例。</p><p>下面是实例生命周期的图表。你现在并不需要完全理解图中的所有内容，但以后它将是一个有用的参考。</p><p><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="生命周期图示"></p><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>计算属性允许我们声明性地计算衍生值。然而在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><p>在选项式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/options-state.html#watch"><code>watch</code> 选项</a>在每次响应式属性发生变化时触发一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-comment">// 每当 question 改变时，这个函数就会执行</span><br>    <span class="hljs-title function_">question</span>(<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;<br>      <span class="hljs-keyword">if</span> (newQuestion.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAnswer</span>()<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = (<span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()).<span class="hljs-property">answer</span><br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>&lt;p&gt;<br>  <span class="hljs-title class_">Ask</span> a yes/no <span class="hljs-attr">question</span>:<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span> /&gt;</span></span><br>&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><hr><h3 id="深层侦听器"><a href="#深层侦听器" class="headerlink" title="深层侦听器"></a>深层侦听器</h3><p><code>watch</code> 默认是浅层的：被侦听的属性，仅在被赋新值时，才会触发回调函数——而嵌套属性的变化不会触发。如果想侦听所有嵌套的变更，你需要深层侦听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">someObject</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>        <span class="hljs-comment">// 注意：在嵌套的变更中，</span><br>        <span class="hljs-comment">// 只要没有替换对象本身，</span><br>        <span class="hljs-comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span><br>      &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="即时回调的侦听器"><a href="#即时回调的侦听器" class="headerlink" title="即时回调的侦听器"></a>即时回调的侦听器</h3><p><code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>我们可以用一个对象来声明侦听器，这个对象有 <code>handler</code> 方法和 <code>immediate: true</code> 选项，这样便能强制回调函数立即执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">question</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newQuestion</span>) &#123;<br>        <span class="hljs-comment">// 在组件实例创建时会立即调用</span><br>      &#125;,<br>      <span class="hljs-comment">// 强制立即执行回调</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="回调的触发时机"><a href="#回调的触发时机" class="headerlink" title="回调的触发时机"></a>回调的触发时机</h3><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">key</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>      <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="this-watch"><a href="#this-watch" class="headerlink" title="this.$watch()"></a><code>this.$watch()</code></h3><p>我们也可以使用组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#watch"><code>$watch()</code> 方法</a>来命令式地创建一个侦听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.$watch(<span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">newQuestion</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果要在特定条件下设置一个侦听器，或者只侦听响应用户交互的内容，这方法很有用。它还允许你提前停止该侦听器。</p><h3 id="停止侦听器"><a href="#停止侦听器" class="headerlink" title="停止侦听器"></a>停止侦听器</h3><p>用 <code>watch</code> 选项或者 <code>$watch()</code> 实例方法声明的侦听器，会在宿主组件卸载时自动停止。因此，在大多数场景下，你无需关心怎么停止它。</p><p>在少数情况下，你的确需要在组件卸载之前就停止一个侦听器，这时可以调用 <code>$watch()</code> API 返回的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> unwatch = <span class="hljs-variable language_">this</span>.$watch(<span class="hljs-string">&#x27;foo&#x27;</span>, callback)<br><br><span class="hljs-comment">// ...当该侦听器不再需要时</span><br><span class="hljs-title function_">unwatch</span>()<br><br></code></pre></td></tr></table></figure><h2 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h2><p>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input ref=&quot;input&quot;&gt;<br></code></pre></td></tr></table></figure><p><code>ref</code> 是一个特殊的 attribute，和 <code>v-for</code> 章节中提到的 <code>key</code> 类似。它允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。这可能很有用，比如说在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。</p><h4 id="访问模板引用"><a href="#访问模板引用" class="headerlink" title="访问模板引用"></a>访问模板引用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">input</span>.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>注意，你只可以<strong>在组件挂载后</strong>才能访问模板引用。如果你想在模板中的表达式上访问 <code>$refs.input</code>，在初次渲染时会是 <code>null</code>。这是因为在初次渲染前这个元素还不存在呢！</p><h4 id="v-for-中的模板引用-需要-v3-2-25-及以上版本"><a href="#v-for-中的模板引用-需要-v3-2-25-及以上版本" class="headerlink" title="v-for 中的模板引用(需要 v3.2.25 及以上版本)"></a><code>v-for</code> 中的模板引用(需要 v3.2.25 及以上版本)</h4><p>当在 <code>v-for</code> 中使用模板引用时，相应的引用中包含的值是一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: [<br>        <span class="hljs-comment">/* ... */</span><br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">items</span>)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&#123; item &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p style="color:red">应该注意的是，ref 数组**并不**保证与源数组相同的顺序。</p><hr><h4 id="函数模板引用"><a href="#函数模板引用" class="headerlink" title="函数模板引用"></a>函数模板引用</h4><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input :ref=<span class="hljs-string">&quot;(el) =&gt; &#123; /* 将 el 赋值给一个数据属性或 ref 变量 */ &#125;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>注意我们这里需要使用动态的 <code>:ref</code> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><h4 id="组件上的-ref"><a href="#组件上的-ref" class="headerlink" title="组件上的 ref"></a>组件上的 ref</h4><p>模板引用也可以被用在一个子组件上。这种情况下引用中获得的值是组件实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">Child</span><br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this.$refs.child 是 &lt;Child /&gt; 组件的实例</span><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;child&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果一个子组件使用的是选项式 API ，被引用的组件实例和该子组件的 <code>this</code> 完全一致，这意味着父组件对子组件的每一个属性和方法都有完全的访问权。这使得在父组件和子组件之间创建紧密耦合的实现细节变得很容易，当然也因此，应该只在绝对需要时才使用组件引用。大多数情况下，你应该首先使用标准的 props 和 emit 接口来实现父子组件交互。</p><p><code>expose</code> 选项可以用于限制对子组件实例的访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">expose</span>: [<span class="hljs-string">&#x27;publicData&#x27;</span>, <span class="hljs-string">&#x27;publicMethod&#x27;</span>],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">publicData</span>: <span class="hljs-string">&#x27;foo&#x27;</span>,<br>      <span class="hljs-attr">privateData</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">publicMethod</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">/* ... */</span><br>    &#125;,<br>    <span class="hljs-title function_">privateMethod</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">/* ... */</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p style="color:yellow">在上面这个例子中，父组件通过模板引用访问到子组件实例后，仅能访问 `publicData` 和 `publicMethod`。</p><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>要使用一个子组件，我们需要在父组件中导入它。假设我们把计数器组件放在了一个叫做 <code>ButtonCounter.vue</code> 的文件中，这个组件将会以默认导出的形式被暴露给外部。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import ButtonCounter from &#x27;./ButtonCounter.vue&#x27;<br><br>export default &#123;<br>  components: &#123;<br>    ButtonCounter<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;h1&gt;Here is a child component!&lt;/h1&gt;<br>  &lt;ButtonCounter /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>若要将导入的组件暴露给模板，我们需要在 <code>components</code> 选项上<a href="https://cn.vuejs.org/guide/components/registration.html">注册</a>它。这个组件将会以其注册时的名字作为模板中的标签名。</p><p>当然，你也可以全局地注册一个组件，使得它在当前应用中的任何组件上都可以使用，而不需要额外再导入。关于组件的全局注册和局部注册两种方式的利弊，我们放在了<a href="https://cn.vuejs.org/guide/components/registration.html">组件注册</a>这一章节中专门讨论。</p><p>组件可以被重用任意多次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1&gt;Here is a child component!&lt;/h1&gt;<br>&lt;ButtonCounter /&gt;<br>&lt;ButtonCounter /&gt;<br>&lt;ButtonCounter /&gt;<br></code></pre></td></tr></table></figure><p>你会注意到，每当点击这些按钮时，每一个组件都维护着自己的状态，是不同的 <code>count</code>。这是因为每当你使用一个组件，就创建了一个新的<strong>实例</strong>。</p><p>在单文件组件中，推荐为子组件使用 <code>PascalCase</code> 的标签名，以此来和原生的 HTML 元素作区分。虽然原生 HTML 标签名是不区分大小写的，但 Vue 单文件组件是可以在编译中区分大小写的。我们也可以使用 <code>/&gt;</code> 来关闭一个标签。</p><p>如果你是直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，模板的编译需要遵从浏览器中 HTML 的解析行为。在这种情况下，你应该需要使用 <code>kebab-case</code> 形式并显式地关闭这些组件的标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 如果是在 <span class="hljs-variable constant_">DOM</span> 中书写该模板 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="传递-props"><a href="#传递-props" class="headerlink" title="传递 props"></a>传递 props</h3><p>如果我们正在构建一个博客，我们可能需要一个表示博客文章的组件。我们希望所有的博客文章分享相同的视觉布局，但有不同的内容。要实现这样的效果自然必须向组件中传递数据，例如每篇文章标题和内容，这就会使用到 props。</p><p>Props 是一种特别的 attributes，你可以在组件上声明注册。要传递给博客文章组件一个标题，我们必须在组件的 props 列表上声明它。这里要用到 <a href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a> 选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- BlogPost.vue --&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;title&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>当一个值被传递给 prop 时，它将成为该组件实例上的一个属性。该属性的值可以像其他组件属性一样，在模板和组件的 <code>this</code> 上下文中访问。</p><p>一个组件可以有任意多的 props，默认情况下，所有 prop 都接受任意类型的值。</p><p>当一个 prop 被注册后，可以像这样以自定义 attribute 的形式传递数据给它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Blogging with Vue&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Why Vue is so fun&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在实际应用中，我们可能在父组件中会有如下的一个博客文章数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">posts</span>: [<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;My journey with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blogging with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Why Vue is so fun&#x27;</span> &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种情况下，我们可以使用 <code>v-for</code> 来渲染它们：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag"> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>让我们继续关注我们的 <code>&lt;BlogPost&gt;</code> 组件。我们会发现有时候它需要与父组件进行交互。例如，要在此处实现 A11y 的需求，将博客文章的文字能够放大，而页面的其余部分仍使用默认字号。</p><p>在父组件中，我们可以添加一个 <code>postFontSize</code> 数据属性来实现这个效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">posts</span>: [<br>      <span class="hljs-comment">/* ... */</span><br>    ],<br>    <span class="hljs-attr">postFontSize</span>: <span class="hljs-number">1</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在模板中用它来控制所有博客文章的字体大小：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag">   /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后，给 <code>&lt;BlogPost&gt;</code> 组件添加一个按钮：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- BlogPost.vue, 省略了 &lt;script&gt; --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;blog-post&quot;&gt;<br>    &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;<br>    &lt;button&gt;Enlarge text&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>这个按钮目前还没有做任何事情，我们想要点击这个按钮来告诉父组件它应该放大所有博客文章的文字。要解决这个问题，组件实例提供了一个自定义事件系统。父组件可以通过 <code>v-on</code> 或 <code>@</code> 来选择性地监听子组件上抛的事件，就像监听原生 DOM 事件那样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enlarge-text</span>=<span class="hljs-string">&quot;postFontSize += 0.1&quot;</span></span><br><span class="hljs-tag"> /&gt;</span><br></code></pre></td></tr></table></figure><p>子组件可以通过调用内置的 <a href="https://cn.vuejs.org/api/component-instance.html#emit"><strong><code>$emit</code></strong> 方法</a>，通过传入事件名称来抛出一个事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- BlogPost.vue, 省略了 &lt;script&gt; --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;blog-post&quot;&gt;<br>    &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;Enlarge text&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>因为有了 <code>@enlarge-text=&quot;postFontSize += 0.1&quot;</code> 的监听，父组件会接收这一事件，从而更新 <code>postFontSize</code> 的值。</p><p>我们可以通过 <a href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a> 选项来声明需要抛出的事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- BlogPost.vue --&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;title&#x27;],<br>  emits: [&#x27;enlarge-text&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>这声明了一个组件可能触发的所有事件，还可以对事件的参数进行<a href="https://cn.vuejs.org/guide/components/events.html#validate-emitted-events">验证</a>。同时，这还可以让 Vue 避免将它们作为原生事件监听器隐式地应用于子组件的根元素。</p><p>以上就是目前你需要了解的关于组件自定义事件的所有知识了。如果你看完本章节后还想知道更多细节，请深入阅读<a href="https://cn.vuejs.org/guide/components/events.html">组件事件</a>章节。</p><h3 id="通过插槽来分配内容"><a href="#通过插槽来分配内容" class="headerlink" title="通过插槽来分配内容#"></a>通过插槽来分配内容<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#content-distribution-with-slots">#</a></h3><p>一些情况下我们会希望能和 HTML 元素一样向组件中传递内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">AlertBox</span>&gt;</span><br>  Something bad happened.<br><span class="hljs-tag">&lt;/<span class="hljs-name">AlertBox</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这可以通过 Vue 的自定义 <code>&lt;slot&gt;</code> 元素来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;alert-box&quot;&gt;<br>    &lt;strong&gt;This is an Error for Demo Purposes&lt;/strong&gt;<br>    &lt;slot /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.alert-box &#123;<br>  /* ... */<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;alert-box&quot;&gt;<br>    &lt;strong&gt;Error!&lt;/strong&gt;<br>    &lt;br/&gt;<br>    &lt;slot /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.alert-box &#123;<br>  color: #666;<br>  border: 1px solid red;<br>  border-radius: 4px;<br>  padding: 20px;<br>  background-color: #f8f8f8;<br>&#125;<br>  <br>strong &#123;<br>color: red;    <br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import AlertBox from &#x27;./AlertBox.vue&#x27;<br>  <br>export default &#123;<br>  components: &#123; AlertBox &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;AlertBox&gt;<br>  Something bad happened.<br>&lt;/AlertBox&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>以上就是目前你需要了解的关于插槽的所有知识了。如果你看完本章节后还想知道更多细节，请深入阅读<a href="https://cn.vuejs.org/guide/components/slots.html">组件插槽</a>章节。</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>有些场景会需要在两个组件间来回切换，比如 Tab 界面：</p><p>上面的例子是通过 Vue 的 <code>&lt;component&gt;</code> 元素和特殊的 <code>is</code> attribute 实现的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- currentTab 改变时组件也改变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;currentTab&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，被传给 <code>:is</code> 的值可以是以下几种：</p><ul><li>被注册的组件名</li><li>导入的组件对象</li></ul><p>你也可以使用 <code>is</code> attribute 来创建一般的 HTML 元素。</p><p>当使用 <code>&lt;component :is=&quot;...&quot;&gt;</code> 来在多个组件间作切换时，被切换掉的组件会被卸载。我们可以通过 <a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html">&#96;&#96; 组件</a>强制被切换掉的组件仍然保持“存活”的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--Home.vue--&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;tab&quot;&gt;<br>    Archive component<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!--Posts.vue--&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;tab&quot;&gt;<br>    Posts component<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;!--Archive.vue--&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;tab&quot;&gt;<br>    Home component<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;script&gt;<br>import Home from &#x27;./Home.vue&#x27;<br>import Posts from &#x27;./Posts.vue&#x27;<br>import Archive from &#x27;./Archive.vue&#x27;<br>  <br>export default &#123;<br>  components: &#123;<br>    Home,<br>    Posts,<br>    Archive<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      currentTab: &#x27;Home&#x27;,<br>      tabs: [&#x27;Home&#x27;, &#x27;Posts&#x27;, &#x27;Archive&#x27;]<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div class=&quot;demo&quot;&gt;<br>    &lt;button<br>       v-for=&quot;tab in tabs&quot;<br>       :key=&quot;tab&quot;<br>       :class=&quot;[&#x27;tab-button&#x27;, &#123; active: currentTab === tab &#125;]&quot;<br>       @click=&quot;currentTab = tab&quot;<br>     &gt;<br>      &#123;&#123; tab &#125;&#125;<br>    &lt;/button&gt;<br>  &lt;component :is=&quot;currentTab&quot; class=&quot;tab&quot;&gt;&lt;/component&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.demo &#123;<br>  font-family: sans-serif;<br>  border: 1px solid #eee;<br>  border-radius: 2px;<br>  padding: 20px 30px;<br>  margin-top: 1em;<br>  margin-bottom: 40px;<br>  user-select: none;<br>  overflow-x: auto;<br>&#125;<br><br>.tab-button &#123;<br>  padding: 6px 10px;<br>  border-top-left-radius: 3px;<br>  border-top-right-radius: 3px;<br>  border: 1px solid #ccc;<br>  cursor: pointer;<br>  background: #f0f0f0;<br>  margin-bottom: -1px;<br>  margin-right: -1px;<br>&#125;<br>.tab-button:hover &#123;<br>  background: #e0e0e0;<br>&#125;<br>.tab-button.active &#123;<br>  background: #e0e0e0;<br>&#125;<br>.tab &#123;<br>  border: 1px solid #ccc;<br>  padding: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="深入组件"><a href="#深入组件" class="headerlink" title="深入组件"></a><em>深入组件</em></h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>我们可以使用 <a href="https://cn.vuejs.org/guide/essentials/application.html">Vue 应用实例</a>的 <code>app.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;)<br><br>app.<span class="hljs-title function_">component</span>(<br>  <span class="hljs-comment">// 注册的名字</span><br>  <span class="hljs-string">&#x27;MyComponent&#x27;</span>,<br>  <span class="hljs-comment">// 组件的实现</span><br>  &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>如果使用单文件组件，你可以注册被导入的 <code>.vue</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyComponent&#x27;</span>, <span class="hljs-title class_">MyComponent</span>)<br><br></code></pre></td></tr></table></figure><p><code>app.component()</code> 方法可以被链式调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app<br>  .<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ComponentA&#x27;</span>, <span class="hljs-title class_">ComponentA</span>)<br>  .<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ComponentB&#x27;</span>, <span class="hljs-title class_">ComponentB</span>)<br>  .<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;ComponentC&#x27;</span>, <span class="hljs-title class_">ComponentC</span>)<br></code></pre></td></tr></table></figure><p>全局注册的组件可以在此应用的任意组件的模板中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 这在当前应用的任意组件中都可用 --&gt;<br>&lt;ComponentA/&gt;<br>&lt;ComponentB/&gt;<br>&lt;ComponentC/&gt;<br><br></code></pre></td></tr></table></figure><p>所有的子组件也可以使用全局注册的组件，这意味着这三个组件也都可以在<em>彼此内部</em>使用。</p><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>全局注册虽然很方便，但有以下几个问题：</p><ol><li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</li><li>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</li></ol><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</p><p>局部注册需要使用 <code>components</code> 选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import ComponentA from &#x27;./ComponentA.vue&#x27;<br><br>export default &#123;<br>  components: &#123;<br>    ComponentA<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;ComponentA /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>对于每个 <code>components</code> 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现。上面的例子中使用的是 ES2015 的缩写语法，等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">ComponentA</span>: <span class="hljs-title class_">ComponentA</span><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>请注意：<strong>局部注册的组件在后代组件中并*不*可用</strong>。在这个例子中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h3 id="组件名格式"><a href="#组件名格式" class="headerlink" title="组件名格式**"></a>组件名格式<a href="https://cn.vuejs.org/guide/components/registration.html#component-name-casing">**</a></h3><p>在整个指引中，我们都使用 PascalCase 作为组件名的注册格式，这是因为：</p><ol><li>PascalCase 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全。</li><li><code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。同时也能够将 Vue 组件和自定义元素 (web components) 区分开来。</li></ol><p>在单文件组件和内联字符串模板中，我们都推荐这样做。但是，PascalCase 的标签名在 DOM 模板中是不可用的，详情参见 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dom-template-parsing-caveats">DOM 模板解析注意事项</a>。</p><p>为了方便，Vue 支持将模板中使用 kebab-case 的标签解析为使用 PascalCase 注册的组件。这意味着一个以 <code>MyComponent</code> 为名注册的组件，在模板中可以通过 <code>&lt;MyComponent&gt;</code> 或 <code>&lt;my-component&gt;</code> 引用。这让我们能够使用同样的 JavaScript 组件注册代码来配合不同来源的模板。</p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="Props-声明"><a href="#Props-声明" class="headerlink" title="Props 声明"></a>Props 声明</h3><p>一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute (关于透传 attribute，我们会在<a href="https://cn.vuejs.org/guide/components/attrs.html">专门的章节</a>中讨论)。</p><p>props 需要使用 <a href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a> 选项来定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// props 会暴露到 `this` 上</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了使用字符串数组来声明 prop 外，还可以使用对象的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于以对象形式声明中的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 <code>number</code> 类型，则可使用 <code>Number</code> 构造函数作为其声明的值。</p><p>对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告。我们将在本章节稍后进一步讨论有关 <a href="https://cn.vuejs.org/guide/components/props.html#prop-validation">prop 校验</a>的更多细节。</p><h3 id="传递-prop-的细节"><a href="#传递-prop-的细节" class="headerlink" title="传递 prop 的细节"></a>传递 prop 的细节</h3><p>如果一个 prop 的名字很长，应使用 camelCase 形式，因为它们是合法的 JavaScript 标识符，可以直接在模板的表达式中使用，也可以避免在作为属性 key 名时必须加上引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">greetingMessage</span>: <span class="hljs-title class_">String</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; greetingMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然理论上你也可以在向子组件传递 props 时使用 camelCase 形式 (使用 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dom-template-parsing-caveats">DOM 模板</a>时例外)，但实际上为了和 HTML attribute 对齐，我们通常会将其写为 kebab-case 形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">greeting-message</span>=<span class="hljs-string">&quot;hello&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>对于组件名我们推荐使用 <a href="https://cn.vuejs.org/guide/components/registration.html#component-name-casing">PascalCase</a>，因为这提高了模板的可读性，能帮助我们区分 Vue 组件和原生 HTML 元素。然而对于传递 props 来说，使用 camelCase 并没有太多优势，因此我们推荐更贴近 HTML 的书写风格。</p><h3 id="静态-vs-动态-Prop"><a href="#静态-vs-动态-Prop" class="headerlink" title="静态 vs. 动态 Prop"></a>静态 vs. 动态 Prop</h3><p>至此，你已经见过了很多像这样的静态值形式的 props：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><p>相应地，还有使用 <code>v-bind</code> 或缩写 <code>:</code> 来进行动态绑定的 props：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 根据一个变量的值动态传入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据一个更复杂表达式的值动态传入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="传递不同的值类型"><a href="#传递不同的值类型" class="headerlink" title="传递不同的值类型**"></a>传递不同的值类型<a href="https://cn.vuejs.org/guide/components/props.html#passing-different-value-types">**</a></h4><p>在上述的两个例子中，我们只传入了字符串值，但实际上<strong>任何</strong>类型的值都可以作为 props 的值被传递。</p><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 虽然 `42` 是个常量，我们还是需要使用 v-bind --&gt;</span><br><span class="hljs-comment">&lt;!-- 因为这是一个 JavaScript 表达式而不是一个字符串 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:likes</span>=<span class="hljs-string">&quot;42&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据一个变量的值动态传入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:likes</span>=<span class="hljs-string">&quot;post.likes&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 仅写上 prop 但不传值，会隐式转换为 `true` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">is-published</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 虽然 `false` 是静态的值，我们还是需要使用 v-bind --&gt;</span><br><span class="hljs-comment">&lt;!-- 因为这是一个 JavaScript 表达式而不是一个字符串 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:is-published</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据一个变量的值动态传入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">:is-published</span>=<span class="hljs-string">&quot;post.isPublished&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 虽然这个数组是个常量，我们还是需要使用 v-bind --&gt;<br>&lt;!-- 因为这是一个 JavaScript 表达式而不是一个字符串 --&gt;<br>&lt;BlogPost :comment-ids=&quot;[234, 266, 273]&quot; /&gt;<br><br>&lt;!-- 根据一个变量的值动态传入 --&gt;<br>&lt;BlogPost :comment-ids=&quot;post.commentIds&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h5 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 虽然这个对象字面量是个常量，我们还是需要使用 v-bind --&gt;<br>&lt;!-- 因为这是一个 JavaScript 表达式而不是一个字符串 --&gt;<br>&lt;BlogPost<br>  :author=&quot;&#123;<br>    name: &#x27;Veronica&#x27;,<br>    company: &#x27;Veridian Dynamics&#x27;<br>  &#125;&quot;<br> /&gt;<br><br>&lt;!-- 根据一个变量的值动态传入 --&gt;<br>&lt;BlogPost :author=&quot;post.author&quot; /&gt;<br><br></code></pre></td></tr></table></figure><h4 id="使用一个对象绑定多个-prop"><a href="#使用一个对象绑定多个-prop" class="headerlink" title="使用一个对象绑定多个 prop"></a>使用一个对象绑定多个 prop</h4><p>如果你想要将一个对象的所有属性都当作 props 传入，你可以使用<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes">没有参数的 <code>v-bind</code></a>，即只使用 <code>v-bind</code> 而非 <code>:prop-name</code>。例如，这里有一个 <code>post</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">post</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;My Journey with Vue&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以及下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;post&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>而这实际上等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;BlogPost :id=&quot;post.id&quot; :title=&quot;post.title&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p><p>另外，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着你<strong>不应该</strong>在子组件中去更改一个 prop。若你这么做了，Vue 会在控制台上向你抛出警告：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ❌ 警告！prop 是只读的！</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导致你想要更改一个 prop 的需求通常来源于以下两种场景：</p><ol><li><p><strong>prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性</strong>。在这种情况下，最好是新定义一个局部数据属性，从 props 上获取初始值即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// 计数器只是将 this.initialCounter 作为初始值</span><br>      <span class="hljs-comment">// 像下面这样做就使 prop 和后续更新无关了</span><br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialCounter</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>需要对传入的 prop 值做进一步的转换</strong>。在这种情况中，最好是基于该 prop 值定义一个计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;size&#x27;</span>],<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 该 prop 变更时计算属性也会自动更新</span><br>    <span class="hljs-title function_">normalizedSize</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>()<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="更改对象-x2F-数组类型的-props"><a href="#更改对象-x2F-数组类型的-props" class="headerlink" title="更改对象 &#x2F; 数组类型的 props"></a>更改对象 &#x2F; 数组类型的 props</h3><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，而对 Vue 来说，禁止这样的改动虽然可能，但有很大的性能损耗，比较得不偿失。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在最佳实践中，你应该尽可能避免这样的更改，除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该<a href="https://cn.vuejs.org/guide/components/events.html">抛出一个事件</a>来通知父组件做出改变。</p><h3 id="Prop-校验"><a href="#Prop-校验" class="headerlink" title="Prop 校验"></a>Prop 校验</h3><p>Vue 组件可以更细致地声明对传入的 props 的校验要求。比如我们上面已经看到过的类型声明，如果传入的值不满足类型要求，Vue 会在浏览器控制台中抛出警告来提醒使用者。这在开发给其他开发者使用的组件时非常有用。</p><p>要声明对 props 的校验，你可以向 <code>props</code> 选项提供一个带有 props 校验选项的对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础类型检查</span><br>    <span class="hljs-comment">//（给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多种可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必传，且为 String 类型</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// Number 类型的默认值</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 对象类型的默认值</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-comment">// 对象或者数组应当用工厂函数返回。</span><br>      <span class="hljs-comment">// 工厂函数会收到组件所接收的原始 props</span><br>      <span class="hljs-comment">// 作为参数</span><br>      <span class="hljs-title function_">default</span>(<span class="hljs-params">rawProps</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义类型校验函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>      <span class="hljs-title function_">validator</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// The value must match one of these strings</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">includes</span>(value)<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 函数类型的默认值</span><br>    <span class="hljs-attr">propG</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Function</span>,<br>      <span class="hljs-comment">// 不像对象或数组的默认，这不是一个工厂函数。这会是一个用来作为默认值的函数</span><br>      <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Default function&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>一些补充细节：</p><ul><li>所有 prop 默认都是可选的，除非声明了 <code>required: true</code>。</li><li>除 <code>Boolean</code> 外的未传递的可选 prop 将会有一个默认值 <code>undefined</code>。</li><li><code>Boolean</code> 类型的未传递 prop 将被转换为 <code>false</code>。你应该为它设置一个 <code>default</code> 值来确保行为符合预期。</li><li>如果声明了 <code>default</code> 值，那么在 prop 的值被解析为 <code>undefined</code> 时，无论 prop 是未被传递还是显式指明的 <code>undefined</code>，都会改为 <code>default</code> 值。</li></ul><p>当 prop 的校验失败后，Vue 会抛出一个控制台警告 (在开发模式下)。</p><h4 id="运行时类型检查"><a href="#运行时类型检查" class="headerlink" title="运行时类型检查#"></a>运行时类型检查<a href="https://cn.vuejs.org/guide/components/props.html#runtime-type-checks">#</a></h4><p>校验选项中的 <code>type</code> 可以是下列这些原生构造函数：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>另外，<code>type</code> 也可以是自定义的类或构造函数，Vue 将会通过 <code>instanceof</code> 来检查类型是否匹配。例如下面这个类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>你可以将其作为一个 prop 的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">author</span>: <span class="hljs-title class_">Person</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue 会通过 <code>instanceof Person</code> 来校验 <code>author</code> prop 的值是否是 <code>Person</code> 类的一个实例。</p><h3 id="Boolean-类型转换"><a href="#Boolean-类型转换" class="headerlink" title="Boolean 类型转换"></a>Boolean 类型转换</h3><p>为了更贴近原生 boolean attributes 的行为，声明为 <code>Boolean</code> 类型的 props 有特别的类型转换规则。以带有如下声明的 <code>&lt;MyComponent&gt;</code> 组件为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">disabled</span>: <span class="hljs-title class_">Boolean</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该组件可以被这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 等同于传入 :disabled=<span class="hljs-string">&quot;true&quot;</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">disabled</span> /&gt;</span></span><br><br>&lt;!-- 等同于传入 :disabled=<span class="hljs-string">&quot;false&quot;</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>当一个 prop 被声明为允许多种类型时，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">disabled</span>: [<span class="hljs-title class_">Boolean</span>, <span class="hljs-title class_">Number</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论声明类型的顺序如何，<code>Boolean</code> 类型的特殊转换规则都会被应用。</p><h2 id="组件事件"><a href="#组件事件" class="headerlink" title="组件事件"></a>组件事件</h2><h3 id="触发与监听事件"><a href="#触发与监听事件" class="headerlink" title="触发与监听事件"></a>触发与监听事件</h3><p>在组件的模板表达式中，可以直接使用 <code>$emit</code> 方法触发自定义事件 (例如：在 <code>v-on</code> 的处理函数中)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- MyComponent --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;someEvent&#x27;)&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>$emit()</code> 方法在组件实例上也同样以 <code>this.$emit()</code> 的形式可用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">submit</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;submit&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>父组件可以通过 <code>v-on</code> (缩写为 <code>@</code>) 来监听事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;MyComponent @some-event=&quot;callback&quot; /&gt;<br></code></pre></td></tr></table></figure><p>同样，组件的事件监听器也支持 <code>.once</code> 修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;MyComponent @some-event.once=&quot;callback&quot; /&gt;<br></code></pre></td></tr></table></figure><p>像组件与 prop 一样，事件的名字也提供了自动的格式转换。注意这里我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 kebab-case 形式来监听。与 <a href="https://cn.vuejs.org/guide/components/props.html#prop-name-casing">prop 大小写格式</a>一样，在模板中我们也推荐使用 kebab-case 形式来编写监听器。</p><h3 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h3><p>有时候我们会需要在触发事件时附带一个特定的值。举例来说，我们想要 <code>&lt;BlogPost&gt;</code> 组件来管理文本会缩放得多大。在这个场景下，我们可以给 <code>$emit</code> 提供一个额外的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;$emit(&#x27;increaseBy&#x27;, 1)&quot;&gt;<br>  Increase by 1<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>然后我们在父组件中监听事件，我们可以先简单写一个内联的箭头函数作为监听器，此函数会接收到事件附带的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;MyButton @increase-by=&quot;(n) =&gt; count += n&quot; /&gt;<br></code></pre></td></tr></table></figure><p>或者，也可以用一个组件方法来作为事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;MyButton @increase-by=&quot;increaseCount&quot; /&gt;<br></code></pre></td></tr></table></figure><p>该方法也会接收到事件所传递的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">increaseCount</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += n<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明触发的事件"><a href="#声明触发的事件" class="headerlink" title="声明触发的事件"></a>声明触发的事件</h3><p>组件要触发的事件可以显式地通过 <a href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a> 选项来声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;inFocus&#x27;</span>, <span class="hljs-string">&#x27;submit&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 <code>emits</code> 选项还支持对象语法，它允许我们对触发事件的参数进行验证：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: &#123;<br>    <span class="hljs-title function_">submit</span>(<span class="hljs-params">payload</span>) &#123;<br>      <span class="hljs-comment">// 通过返回值为 `true` 还是为 `false` 来判断</span><br>      <span class="hljs-comment">// 验证是否通过</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="事件校验"><a href="#事件校验" class="headerlink" title="事件校验"></a>事件校验</h3><p>和对 props 添加类型校验的方式类似，所有触发的事件也可以使用对象形式来描述。</p><p>要为事件添加校验，那么事件可以被赋值为一个函数，接受的参数就是抛出事件时传入 <code>this.$emit</code> 的内容，返回一个布尔值来表明事件是否合法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: &#123;<br>    <span class="hljs-comment">// 没有校验</span><br>    <span class="hljs-attr">click</span>: <span class="hljs-literal">null</span>,<br><br>    <span class="hljs-comment">// 校验 submit 事件</span><br>    <span class="hljs-attr">submit</span>: <span class="hljs-function">(<span class="hljs-params">&#123; email, password &#125;</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (email &amp;&amp; password) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;Invalid submit event payload!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">email, password</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;submit&#x27;</span>, &#123; email, password &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配合-v-model-使用"><a href="#配合-v-model-使用" class="headerlink" title="配合 v-model 使用"></a>配合 <code>v-model</code> 使用</h3><p>自定义事件可以用于开发支持 <code>v-model</code> 的自定义表单组件。回忆一下 <code>v-model</code> 在原生元素上的用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码其实等价于下面这段 (编译器会对 <code>v-model</code> 进行展开)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;searchText = $event.target.value&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>而当使用在一个组件上时，<code>v-model</code> 会被展开为如下的形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">CustomInput</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:modelValue</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">update:modelValue</span>=<span class="hljs-string">&quot;newValue =&gt; searchText = newValue&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>要让这个例子实际工作起来，<code>&lt;CustomInput&gt;</code> 组件内部需要做两件事：</p><ol><li>将内部原生 <code>input</code> 元素的 <code>value</code> attribute 绑定到 <code>modelValue</code> prop</li><li>输入新的值时在 <code>input</code> 元素上触发 <code>update:modelValue</code> 事件</li></ol><p>这里是相应的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- CustomInput.vue --&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;modelValue&#x27;],<br>  emits: [&#x27;update:modelValue&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    :value=&quot;modelValue&quot;<br>    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>现在 <code>v-model</code> 也可以在这个组件上正常工作了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;CustomInput v-model=&quot;searchText&quot; /&gt;<br></code></pre></td></tr></table></figure><p>另一种在组件内实现 <code>v-model</code> 的方式是使用一个可写的，同时具有 getter 和 setter 的计算属性。<code>get</code> 方法需返回 <code>modelValue</code> prop，而 <code>set</code> 方法需触发相应的事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- CustomInput.vue --&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;modelValue&#x27;],<br>  emits: [&#x27;update:modelValue&#x27;],<br>  computed: &#123;<br>    value: &#123;<br>      get() &#123;<br>        return this.modelValue<br>      &#125;,<br>      set(value) &#123;<br>        this.$emit(&#x27;update:modelValue&#x27;, value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input v-model=&quot;value&quot; /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><h4 id="v-model-的参数"><a href="#v-model-的参数" class="headerlink" title="v-model 的参数"></a><code>v-model</code> 的参数</h4><p>默认情况下，<code>v-model</code> 在组件上都是使用 <code>modelValue</code> 作为 prop，并以 <code>update:modelValue</code> 作为对应的事件。我们可以通过给 <code>v-model</code> 指定一个参数来更改这些名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-model:title</span>=<span class="hljs-string">&quot;bookTitle&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，子组件应声明一个 <code>title</code> prop，并通过触发 <code>update:title</code> 事件更新父组件值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- MyComponent.vue --&gt;<br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;title&#x27;],<br>  emits: [&#x27;update:title&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;title&quot;<br>    @input=&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><h4 id="多个-v-model-绑定"><a href="#多个-v-model-绑定" class="headerlink" title="多个 v-model 绑定"></a>多个 <code>v-model</code> 绑定</h4><p>利用刚才在 <a href="https://cn.vuejs.org/guide/components/events.html#v-model-arguments"><code>v-model</code> 参数</a>小节中学到的技巧，我们可以在一个组件上创建多个 <code>v-model</code> 双向绑定，每一个 <code>v-model</code> 都会同步不同的 prop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;UserName<br>  v-model:first-name=&quot;first&quot;<br>  v-model:last-name=&quot;last&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    firstName: String,<br>    lastName: String<br>  &#125;,<br>  emits: [&#x27;update:firstName&#x27;, &#x27;update:lastName&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;firstName&quot;<br>    @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;<br>  /&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;lastName&quot;<br>    @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--APP.vue--&gt;<br>&lt;script&gt;<br>import UserName from &#x27;./UserName.vue&#x27;<br><br>export default &#123;<br>  components: &#123; UserName &#125;,<br>  data() &#123;<br>    return &#123;<br>      first: &#x27;John&#x27;,<br>      last: &#x27;Doe&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;h1&gt;&#123;&#123; first &#125;&#125; &#123;&#123; last &#125;&#125;&lt;/h1&gt;<br>  &lt;UserName<br>    v-model:first-name=&quot;first&quot;<br>    v-model:last-name=&quot;last&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="处理-v-model-修饰符"><a href="#处理-v-model-修饰符" class="headerlink" title="处理 v-model 修饰符"></a>处理 <code>v-model</code> 修饰符</h4><p>在学习输入绑定时，我们知道了 <code>v-model</code> 有一些<a href="https://cn.vuejs.org/guide/essentials/forms.html#modifiers">内置的修饰符</a>，例如 <code>.trim</code>，<code>.number</code> 和 <code>.lazy</code>。在某些场景下，你可能想要一个自定义组件的 <code>v-model</code> 支持自定义的修饰符。</p><p>我们来创建一个自定义的修饰符 <code>capitalize</code>，它会自动将 <code>v-model</code> 绑定输入的字符串值第一个字母转为大写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;MyComponent v-model.capitalize=&quot;myText&quot; /&gt;<br></code></pre></td></tr></table></figure><p>组件的 <code>v-model</code> 上所添加的修饰符，可以通过 <code>modelModifiers</code> prop 在组件内访问到。在下面的组件中，我们声明了 <code>modelModifiers</code> 这个 prop，它的默认值是一个空对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    modelValue: String,<br>    modelModifiers: &#123;<br>      default: () =&gt; (&#123;&#125;)<br>    &#125;<br>  &#125;,<br>  emits: [&#x27;update:modelValue&#x27;],<br>  created() &#123;<br>    console.log(this.modelModifiers) // &#123; capitalize: true &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;modelValue&quot;<br>    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>注意这里组件的 <code>modelModifiers</code> prop 包含了 <code>capitalize</code> 且其值为 <code>true</code>，因为它在模板中的 <code>v-model</code> 绑定上被使用了。</p><p>有了 <code>modelModifiers</code> 这个 prop，我们就可以在原生事件侦听函数中检查它的值，然后决定触发的自定义事件中要向父组件传递什么值。在下面的代码里，我们就是在每次 <code>&lt;input&gt;</code> 元素触发 <code>input</code> 事件时将值的首字母大写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    modelValue: String,<br>    modelModifiers: &#123;<br>      default: () =&gt; (&#123;&#125;)<br>    &#125;<br>  &#125;,<br>  emits: [&#x27;update:modelValue&#x27;],<br>  methods: &#123;<br>    emitValue(e) &#123;<br>      let value = e.target.value<br>      if (this.modelModifiers.capitalize) &#123;<br>        value = value.charAt(0).toUpperCase() + value.slice(1)<br>      &#125;<br>      this.$emit(&#x27;update:modelValue&#x27;, value)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;emitValue&quot; /&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>对于又有参数又有修饰符的 <code>v-model</code> 绑定，生成的 prop 名将是 <code>arg + &quot;Modifiers&quot;</code>。举例来说：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-model:title.capitalize</span>=<span class="hljs-string">&quot;myText&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相应的声明应该是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;titleModifiers&#x27;</span>],<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;update:title&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">titleModifiers</span>) <span class="hljs-comment">// &#123; capitalize: true &#125;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="Attributes-继承"><a href="#Attributes-继承" class="headerlink" title="Attributes 继承"></a>Attributes 继承</h2><p>“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 <a href="https://cn.vuejs.org/guide/components/props.html">props</a> 或 <a href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events">emits</a> 的 attribute 或者 <code>v-on</code> 事件监听器。最常见的例子就是 <code>class</code>、<code>style</code> 和 <code>id</code>。</p><p>当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。举例来说，假如我们有一个 <code>&lt;MyButton&gt;</code> 组件，它的模板长这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个父组件使用了这个组件，并且传入了 <code>class</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;large&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>最后渲染出的 DOM 结果是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;large&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里，<code>&lt;MyButton&gt;</code> 并没有将 <code>class</code> 声明为一个它所接受的 prop，所以 <code>class</code> 被视作透传 attribute，自动透传到了 <code>&lt;MyButton&gt;</code> 的根元素上。</p><h3 id="对-class-和-style-的合并"><a href="#对-class-和-style-的合并" class="headerlink" title="对 class 和 style 的合并"></a>对 <code>class</code> 和 <code>style</code> 的合并</h3><p>如果一个子组件的根元素已经有了 <code>class</code> 或 <code>style</code> attribute，它会和从父组件上继承的值合并。如果我们将之前的 <code>&lt;MyButton&gt;</code> 组件的模板改成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则最后渲染出的 DOM 结果会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn large&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-on-监听器继承"><a href="#v-on-监听器继承" class="headerlink" title="v-on 监听器继承"></a><code>v-on</code> 监听器继承</h3><p>同样的规则也适用于 <code>v-on</code> 事件监听器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClick&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><code>click</code> 监听器会被添加到 <code>&lt;MyButton&gt;</code> 的根元素，即那个原生的 <code>&lt;button&gt;</code> 元素之上。当原生的 <code>&lt;button&gt;</code> 被点击，会触发父组件的 <code>onClick</code> 方法。同样的，如果原生 <code>button</code> 元素自身也通过 <code>v-on</code> 绑定了一个事件监听器，则这个监听器和从父组件继承的监听器都会被触发。</p><h3 id="深层组件继承"><a href="#深层组件继承" class="headerlink" title="深层组件继承"></a>深层组件继承</h3><p>有些情况下一个组件会在根节点上渲染另一个组件。例如，我们重构一下 <code>&lt;MyButton&gt;</code>，让它在根节点上渲染 <code>&lt;BaseButton&gt;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;MyButton/&gt; 的模板，只是渲染另一个组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BaseButton</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>此时 <code>&lt;MyButton&gt;</code> 接收的透传 attribute 会直接继续传给 <code>&lt;BaseButton&gt;</code>。</p><p>请注意：</p><ol><li>透传的 attribute 不会包含 <code>&lt;MyButton&gt;</code> 上声明过的 props 或是针对 <code>emits</code> 声明事件的 <code>v-on</code> 侦听函数，换句话说，声明过的 props 和侦听函数被 <code>&lt;MyButton&gt;</code>“消费”了。</li><li>透传的 attribute 若符合声明，也可以作为 props 传入 <code>&lt;BaseButton&gt;</code>。</li></ol><h3 id="禁用-Attributes-继承"><a href="#禁用-Attributes-继承" class="headerlink" title="禁用 Attributes 继承"></a>禁用 Attributes 继承</h3><p>如果你<strong>不想要</strong>一个组件自动地继承 attribute，你可以在组件选项中设置 <code>inheritAttrs: false</code>。</p><p>最常见的需要禁用 attribute 继承的场景就是 attribute 需要应用在根节点以外的其他元素上。通过设置 <code>inheritAttrs</code> 选项为 <code>false</code>，你可以完全控制透传进来的 attribute 被如何使用。</p><p>这些透传进来的 attribute 可以在模板的表达式中直接用 <code>$attrs</code> 访问到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fallthrough attribute: &#123;&#123; $attrs &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个 <code>$attrs</code> 对象包含了除组件所声明的 <code>props</code> 和 <code>emits</code> 之外的所有其他 attribute，例如 <code>class</code>，<code>style</code>，<code>v-on</code> 监听器等等。</p><p>有几点需要注意：</p><ul><li>和 props 有所不同，透传 attributes 在 JavaScript 中保留了它们原始的大小写，所以像 <code>foo-bar</code> 这样的一个 attribute 需要通过 <code>$attrs[&#39;foo-bar&#39;]</code> 来访问。</li><li>像 <code>@click</code> 这样的一个 <code>v-on</code> 事件监听器将在此对象下被暴露为一个函数 <code>$attrs.onClick</code>。</li></ul><p>现在我们要再次使用一下<a href="https://cn.vuejs.org/guide/components/attrs.html#attribute-inheritance">之前小节</a>中的 <code>&lt;MyButton&gt;</code> 组件例子。有时候我们可能为了样式，需要在 <code>&lt;button&gt;</code> 元素外包装一层 <code>&lt;div&gt;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们想要所有像 <code>class</code> 和 <code>v-on</code> 监听器这样的透传 attribute 都应用在内部的 <code>&lt;button&gt;</code> 上而不是外层的 <code>&lt;div&gt;</code> 上。我们可以通过设定 <code>inheritAttrs: false</code> 和使用 <code>v-bind=&quot;$attrs&quot;</code> 来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>小提示：<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes">没有参数的 <code>v-bind</code></a> 会将一个对象的所有属性都作为 attribute 应用到目标元素上。</p><h3 id="多根节点的-Attributes-继承"><a href="#多根节点的-Attributes-继承" class="headerlink" title="多根节点的 Attributes 继承"></a>多根节点的 Attributes 继承</h3><p>和单根节点组件有所不同，有着多个根节点的组件没有自动 attribute 透传行为。如果 <code>$attrs</code> 没有被显式绑定，将会抛出一个运行时警告。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">CustomLayout</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;custom-layout&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeValue&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>如果 <code>&lt;CustomLayout&gt;</code> 有下面这样的多根节点模板，由于 Vue 不知道要将 attribute 透传到哪里，所以会抛出一个警告。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 <code>$attrs</code> 被显式绑定，则不会有警告：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在-JavaScript-中访问透传-Attributes"><a href="#在-JavaScript-中访问透传-Attributes" class="headerlink" title="在 JavaScript 中访问透传 Attributes"></a>在 JavaScript 中访问透传 Attributes</h3><p>如果需要，你可以通过 <code>$attrs</code> 这个实例属性来访问组件的所有透传 attribute：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$attrs</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插槽-Slots"><a href="#插槽-Slots" class="headerlink" title="插槽 Slots"></a>插槽 Slots</h2><h3 id="插槽内容与出口"><a href="#插槽内容与出口" class="headerlink" title="插槽内容与出口"></a>插槽内容与出口</h3><p>在之前的章节中，我们已经了解到组件能够接收任意类型的 JavaScript 值作为 props，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。</p><p>举例来说，这里有一个 <code>&lt;FancyButton&gt;</code> 组件，可以像这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span><br>  Click me! <span class="hljs-comment">&lt;!-- 插槽内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而 <code>&lt;FancyButton&gt;</code> 的模板是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span> <span class="hljs-comment">&lt;!-- 插槽出口 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content) 将在哪里被渲染。</p><p>最终渲染出的 DOM 是这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过使用插槽，<code>&lt;FancyButton&gt;</code> 仅负责渲染外层的 <code>&lt;button&gt;</code> (以及相应的样式)，而其内部的内容由父组件提供。</p><p>理解插槽的另一种方式是和下面的 JavaScript 函数作类比，其概念是类似的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父元素传入插槽内容</span><br><span class="hljs-title class_">FancyButton</span>(<span class="hljs-string">&#x27;Click me!&#x27;</span>)<br><br><span class="hljs-comment">// FancyButton 在自己的模板中渲染插槽内容</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FancyButton</span>(<span class="hljs-params">slotContent</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;button class=&quot;fancy-btn&quot;&gt;</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;slotContent&#125;</span></span><br><span class="hljs-string">    &lt;/button&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">AwesomeIcon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plus&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过使用插槽，<code>&lt;FancyButton&gt;</code> 组件更加灵活和具有可复用性。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。</p><p>Vue 组件的插槽机制是受<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot">原生 Web Component &#96;&#96; 元素</a>的启发而诞生，同时还做了一些功能拓展，这些拓展的功能我们后面会学习到。</p><h3 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h3><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。举例来说：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的两个 <code>&#123;&#123; message &#125;&#125;</code> 插值表达式渲染的内容都是一样的。</p><p>插槽内容<strong>无法访问</strong>子组件的数据。Vue 模板中的表达式只能访问其定义时所处的作用域，这和 JavaScript 的词法作用域规则是一致的。换言之：</p><p><code>父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</code></p><h3 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h3><p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。比如有这样一个 <code>&lt;SubmitButton&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果我们想在父组件没有提供任何插槽内容时在 <code>&lt;button&gt;</code> 内渲染“Submit”，只需要将“Submit”写在 <code>&lt;slot&gt;</code> 标签之间来作为默认内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><br>    Submit <span class="hljs-comment">&lt;!-- 默认内容 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在，当我们在父组件中使用 <code>&lt;SubmitButton&gt;</code> 且没有提供任何插槽内容时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SubmitButton</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>“Submit”将会被作为默认内容渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但如果我们提供了插槽内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SubmitButton</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">SubmitButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么被显式提供的内容会取代默认内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>有时在一个组件中包含多个插槽出口是很有用的。举例来说，在一个 <code>&lt;BaseLayout&gt;</code> 组件中，有如下模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标题内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主要内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 底部内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>对于这种场景，<code>&lt;slot&gt;</code> 元素可以有一个特殊的 attribute <code>name</code>，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这类带 <code>name</code> 的插槽被称为具名插槽 (named slots)。没有提供 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。</p><p>在父组件中使用 <code>&lt;BaseLayout&gt;</code> 时，我们需要一种方式将多个插槽内容传入到各自目标插槽的出口。此时就需要用到<strong>具名插槽</strong>了：</p><p>要为具名插槽传入内容，我们需要使用一个含 <code>v-slot</code> 指令的 <code>&lt;template&gt;</code> 元素，并将目标插槽的名字传给该指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- header 插槽的内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-slot</code> 有对应的简写 <code>#</code>，因此 <code>&lt;template v-slot:header&gt;</code> 可以简写为 <code>&lt;template #header&gt;</code>。其意思就是“将这部分模板片段传入子组件的 header 插槽中”。</p><p>下面我们给出完整的、向 <code>&lt;BaseLayout&gt;</code> 传递插槽内容的代码，指令均使用的是缩写形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非 <code>&lt;template&gt;</code> 节点都被隐式地视为默认插槽的内容。所以上面也可以写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 隐式的默认插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>现在 <code>&lt;template&gt;</code> 元素中的所有内容都将被传递到相应的插槽。最终渲染出的 HTML 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用 JavaScript 函数来类比可能更有助于你来理解具名插槽：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传入不同的内容给不同名字的插槽</span><br><span class="hljs-title class_">BaseLayout</span>(&#123;<br>  <span class="hljs-attr">header</span>: <span class="hljs-string">`...`</span>,<br>  <span class="hljs-attr">default</span>: <span class="hljs-string">`...`</span>,<br>  <span class="hljs-attr">footer</span>: <span class="hljs-string">`...`</span><br>&#125;)<br><br><span class="hljs-comment">// &lt;BaseLayout&gt; 渲染插槽内容到对应位置</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">BaseLayout</span>(<span class="hljs-params">slots</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;container&quot;&gt;</span><br><span class="hljs-string">      &lt;header&gt;<span class="hljs-subst">$&#123;slots.header&#125;</span>&lt;/header&gt;</span><br><span class="hljs-string">      &lt;main&gt;<span class="hljs-subst">$&#123;slots.<span class="hljs-keyword">default</span>&#125;</span>&lt;/main&gt;</span><br><span class="hljs-string">      &lt;footer&gt;<span class="hljs-subst">$&#123;slots.footer&#125;</span>&lt;/footer&gt;</span><br><span class="hljs-string">    &lt;/div&gt;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3><p><a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamic-arguments">动态指令参数</a>在 <code>v-slot</code> 上也是有效的，即可以定义下面这样的动态插槽名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:</span>[<span class="hljs-attr">dynamicSlotName</span>]&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 缩写为 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #[<span class="hljs-attr">dynamicSlotName</span>]&gt;</span>  <br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这里的表达式和动态指令参数受相同的<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#directives">语法限制</a>。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>在上面的<a href="https://cn.vuejs.org/guide/components/slots.html#render-scope">渲染作用域</a>中我们讨论到，插槽的内容无法访问到子组件的状态。</p><p>然而在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。</p><p>我们也确实有办法这么做！可以像对组件传递 props 那样，向一个插槽的出口上传递 attributes：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&quot;greetingMessage&quot;</span> <span class="hljs-attr">:count</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当需要接收插槽 props 时，默认插槽和具名插槽的使用方式有一些小区别。下面我们将先展示默认插槽如何接受 props，通过子组件标签上的 <code>v-slot</code> 指令，直接接收到了一个插槽 props 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>  &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件传入插槽的 props 作为了 <code>v-slot</code> 指令的值，可以在插槽内的表达式中访问。</p><p>你可以将作用域插槽类比为一个传入子组件的函数。子组件会将相应的 props 作为参数传给它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">MyComponent</span>(&#123;<br>  <span class="hljs-comment">// 类比默认插槽，将其想成一个函数</span><br>  <span class="hljs-attr">default</span>: <span class="hljs-function">(<span class="hljs-params">slotProps</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;slotProps.text&#125;</span> <span class="hljs-subst">$&#123;slotProps.count&#125;</span>`</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">slots</span>) &#123;<br>  <span class="hljs-keyword">const</span> greetingMessage = <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div&gt;<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    // 在插槽函数调用时传入 props</span></span><br><span class="hljs-subst"><span class="hljs-string">    slots.<span class="hljs-keyword">default</span>(&#123; text: greetingMessage, count: <span class="hljs-number">1</span> &#125;)</span></span><br><span class="hljs-subst"><span class="hljs-string">  &#125;</span>&lt;/div&gt;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/28/hello-world/"/>
    <url>/2022/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq学习笔记</title>
    <link href="/2022/10/28/python-RabbitMQ%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/10/28/python-RabbitMQ%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="python-RabbitMQ从入门到集群架构"><a href="#python-RabbitMQ从入门到集群架构" class="headerlink" title="python-RabbitMQ从入门到集群架构"></a>python-RabbitMQ从入门到集群架构</h1><h2 id="1-python-RabbitMQ从入门到集群架构"><a href="#1-python-RabbitMQ从入门到集群架构" class="headerlink" title="1. python-RabbitMQ从入门到集群架构"></a>1. python-RabbitMQ从入门到集群架构</h2><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs DO"><br># 安装好Docker，执行下面命令<br>docker pull rabbitmq:management<br>docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">di</span> --name Myrabbitmq -<span class="hljs-keyword">e</span> RABBITMQ_DEFAULT_USER=admin -<span class="hljs-keyword">e</span> RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management<br># 浏览器访问：<br>http:<span class="hljs-comment">//10.0.0.103:15672</span><br># 输入用户名：guest 密码：guest ，进入到管理控制台<br></code></pre></td></tr></table></figure><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h3><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 无密码</span><br><span class="hljs-comment"># connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;127.0.0.1&#x27;))</span><br><br><span class="hljs-comment"># 有密码</span><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><span class="hljs-comment"># 声明一个队列(创建一个队列)</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;lqz&#x27;</span>, <span class="hljs-comment"># 消息队列名称</span><br>                      body=<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># 声明一个队列(创建一个队列)</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-2消息安全之ack"><a href="#2-2消息安全之ack" class="headerlink" title="2.2消息安全之ack"></a>2.2消息安全之ack</h3><h5 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 无密码</span><br><span class="hljs-comment"># connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;127.0.0.1&#x27;))</span><br><br><span class="hljs-comment"># 有密码</span><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><span class="hljs-comment"># 声明一个队列(创建一个队列)</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;lqz&#x27;</span>, <span class="hljs-comment"># 消息队列名称</span><br>                      body=<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># 声明一个队列(创建一个队列)</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br>    <span class="hljs-comment"># 通知服务端，消息取走了，如果auto_ack=False，不加下面，消息会一直存在</span><br>    <span class="hljs-comment"># ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><br>channel.basic_consume(queue=<span class="hljs-string">&#x27;lqz&#x27;</span>,on_message_callback=callback,auto_ack=<span class="hljs-literal">False</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-3-消息安全之durable持久化"><a href="#2-3-消息安全之durable持久化" class="headerlink" title="2.3  消息安全之durable持久化"></a>2.3  消息安全之durable持久化</h3><h5 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 无密码</span><br><span class="hljs-comment"># connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;127.0.0.1&#x27;))</span><br><br><span class="hljs-comment"># 有密码</span><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><span class="hljs-comment"># 声明一个队列(创建一个队列),durable=True支持持久化，队列必须是新的才可以</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz1&#x27;</span>,durable=<span class="hljs-literal">True</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;lqz1&#x27;</span>, <span class="hljs-comment"># 消息队列名称</span><br>                      body=<span class="hljs-string">&#x27;111&#x27;</span>,<br>                      properties=pika.BasicProperties(<br>                          delivery_mode=<span class="hljs-number">2</span>,  <span class="hljs-comment"># make message persistent,消息也持久化</span><br>                      )<br>                      )<br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># 声明一个队列(创建一个队列)</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br>    <span class="hljs-comment"># 通知服务端，消息取走了，如果auto_ack=False，不加下面，消息会一直存在</span><br>    <span class="hljs-comment"># ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><br>channel.basic_consume(queue=<span class="hljs-string">&#x27;lqz1&#x27;</span>,on_message_callback=callback,auto_ack=<span class="hljs-literal">False</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-4-闲置消费"><a href="#2-4-闲置消费" class="headerlink" title="2.4 闲置消费"></a>2.4 闲置消费</h3><h5 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 无密码</span><br><span class="hljs-comment"># connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;127.0.0.1&#x27;))</span><br><br><span class="hljs-comment"># 有密码</span><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><span class="hljs-comment"># 声明一个队列(创建一个队列),durable=True支持持久化，队列必须是新的才可以</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz123&#x27;</span>,durable=<span class="hljs-literal">True</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;lqz123&#x27;</span>, <span class="hljs-comment"># 消息队列名称</span><br>                      body=<span class="hljs-string">&#x27;111&#x27;</span>,<br>                      properties=pika.BasicProperties(<br>                          delivery_mode=<span class="hljs-number">2</span>,  <span class="hljs-comment"># make message persistent,消息也持久化</span><br>                      )<br>                      )<br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 无密码</span><br><span class="hljs-comment"># connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;127.0.0.1&#x27;))</span><br><br><span class="hljs-comment"># 有密码</span><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><span class="hljs-comment"># 声明一个队列(创建一个队列),durable=True支持持久化，队列必须是新的才可以</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;lqz123&#x27;</span>,durable=<span class="hljs-literal">True</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;lqz123&#x27;</span>, <span class="hljs-comment"># 消息队列名称</span><br>                      body=<span class="hljs-string">&#x27;111&#x27;</span>,<br>                      properties=pika.BasicProperties(<br>                          delivery_mode=<span class="hljs-number">2</span>,  <span class="hljs-comment"># make message persistent,消息也持久化</span><br>                      )<br>                      )<br>connection.close()<br></code></pre></td></tr></table></figure><h3 id="2-5-发布订阅"><a href="#2-5-发布订阅" class="headerlink" title="2.5 发布订阅"></a>2.5 发布订阅</h3><h5 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m1&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;fanout&#x27;</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;m1&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      body=<span class="hljs-string">&#x27;lqz nb&#x27;</span>)<br><br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="订阅者-启动几次订阅者会生成几个队列"><a href="#订阅者-启动几次订阅者会生成几个队列" class="headerlink" title="订阅者(启动几次订阅者会生成几个队列)"></a>订阅者(启动几次订阅者会生成几个队列)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># exchange=&#x27;m1&#x27;,exchange(秘书)的名称</span><br><span class="hljs-comment"># exchange_type=&#x27;fanout&#x27; , 秘书工作方式将消息发送给所有的队列</span><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m1&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;fanout&#x27;</span>)<br><br><span class="hljs-comment"># 随机生成一个队列</span><br>result = channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><span class="hljs-built_in">print</span>(queue_name)<br><span class="hljs-comment"># 让exchange和queque进行绑定.</span><br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m1&#x27;</span>,queue=queue_name)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=queue_name,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-6-发布订阅高级之Routing-按关键字匹配"><a href="#2-6-发布订阅高级之Routing-按关键字匹配" class="headerlink" title="2.6 发布订阅高级之Routing(按关键字匹配)"></a>2.6 发布订阅高级之Routing(按关键字匹配)</h3><h5 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;direct&#x27;</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&#x27;bnb&#x27;</span>, <span class="hljs-comment"># 多个关键字，指定routing_key</span><br>                      body=<span class="hljs-string">&#x27;lqz nb&#x27;</span>)<br><br>connection.close()<br></code></pre></td></tr></table></figure><h5 id="订阅者1"><a href="#订阅者1" class="headerlink" title="订阅者1"></a>订阅者1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># exchange=&#x27;m1&#x27;,exchange(秘书)的名称</span><br><span class="hljs-comment"># exchange_type=&#x27;direct&#x27; , 秘书工作方式将消息发送给不同的关键字</span><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;direct&#x27;</span>)<br><br><span class="hljs-comment"># 随机生成一个队列</span><br>result = channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><span class="hljs-built_in">print</span>(queue_name)<br><span class="hljs-comment"># 让exchange和queque进行绑定.</span><br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;nb&#x27;</span>)<br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;bnb&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=queue_name,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h5 id="订阅者2"><a href="#订阅者2" class="headerlink" title="订阅者2"></a>订阅者2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># exchange=&#x27;m1&#x27;,exchange(秘书)的名称</span><br><span class="hljs-comment"># exchange_type=&#x27;direct&#x27; , 秘书工作方式将消息发送给不同的关键字</span><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;direct&#x27;</span>)<br><br><span class="hljs-comment"># 随机生成一个队列</span><br>result = channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><span class="hljs-built_in">print</span>(queue_name)<br><span class="hljs-comment"># 让exchange和queque进行绑定.</span><br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;nb&#x27;</span>)<br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m2&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;bnb&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=queue_name,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-7-发布订阅高级之Topic-按关键字模糊匹配"><a href="#2-7-发布订阅高级之Topic-按关键字模糊匹配" class="headerlink" title="2.7 发布订阅高级之Topic(按关键字模糊匹配)"></a>2.7 发布订阅高级之Topic(按关键字模糊匹配)</h3><h4 id="发布者-1"><a href="#发布者-1" class="headerlink" title="发布者"></a>发布者</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;topic&#x27;</span>)<br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,<br>                      <span class="hljs-comment"># routing_key=&#x27;lqz.handsome&#x27;, #都能收到</span><br>                      routing_key=<span class="hljs-string">&#x27;lqz.handsome.xx&#x27;</span>, <span class="hljs-comment">#只有lqz.#能收到</span><br>                      body=<span class="hljs-string">&#x27;lqz nb&#x27;</span>)<br><br>connection.close()<br></code></pre></td></tr></table></figure><h4 id="订阅者1-只能加一个单词"><a href="#订阅者1-只能加一个单词" class="headerlink" title="订阅者1 只能加一个单词"></a>订阅者1 只能加一个单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># exchange=&#x27;m1&#x27;,exchange(秘书)的名称</span><br><span class="hljs-comment"># exchange_type=&#x27;direct&#x27; , 秘书工作方式将消息发送给不同的关键字</span><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;topic&#x27;</span>)<br><br><span class="hljs-comment"># 随机生成一个队列</span><br>result = channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><span class="hljs-built_in">print</span>(queue_name)<br><span class="hljs-comment"># 让exchange和queque进行绑定.</span><br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;lqz.#&#x27;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=queue_name,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h4 id="订阅者2-1"><a href="#订阅者2-1" class="headerlink" title="订阅者2"></a>订阅者2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># exchange=&#x27;m1&#x27;,exchange(秘书)的名称</span><br><span class="hljs-comment"># exchange_type=&#x27;topic&#x27; , 模糊匹配</span><br>channel.exchange_declare(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,exchange_type=<span class="hljs-string">&#x27;topic&#x27;</span>)<br><br><span class="hljs-comment"># 随机生成一个队列</span><br>result = channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><span class="hljs-built_in">print</span>(queue_name)<br><span class="hljs-comment"># 让exchange和queque进行绑定.</span><br>channel.queue_bind(exchange=<span class="hljs-string">&#x27;m3&#x27;</span>,queue=queue_name,routing_key=<span class="hljs-string">&#x27;lqz.*&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):<br>    queue_name = result.method.queue <span class="hljs-comment"># 发送的routing_key是什么</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;消费者接受到了任务: %r&quot;</span> % body)<br><br>channel.basic_consume(queue=queue_name,on_message_callback=callback,auto_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h3 id="2-8-基于rabbitmq实现rpc"><a href="#2-8-基于rabbitmq实现rpc" class="headerlink" title="2.8 基于rabbitmq实现rpc"></a>2.8 基于rabbitmq实现rpc</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br>credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>,credentials=credentials))<br>channel = connection.channel()<br><br><span class="hljs-comment"># 起翰监听任务队列</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;rpc_queue&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_request</span>(<span class="hljs-params">ch, method, props, body</span>):<br>    n = <span class="hljs-built_in">int</span>(body)<br>    response = n + <span class="hljs-number">100</span><br>    <span class="hljs-comment"># props.reply_to  要放结果的队列.</span><br>    <span class="hljs-comment"># props.correlation_id  任务</span><br>    ch.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                     routing_key=props.reply_to,<br>                     properties=pika.BasicProperties(correlation_id= props.correlation_id),<br>                     body=<span class="hljs-built_in">str</span>(response))<br>    ch.basic_ack(delivery_tag=method.delivery_tag)<br><br>channel.basic_qos(prefetch_count=<span class="hljs-number">1</span>)<br>channel.basic_consume( queue=<span class="hljs-string">&#x27;rpc_queue&#x27;</span>,on_message_callback=on_request,)<br>channel.start_consuming()<br></code></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> uuid<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciRpcClient</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        credentials = pika.PlainCredentials(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)<br>        self.connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;101.133.225.166&#x27;</span>, credentials=credentials))<br>        self.channel = self.connection.channel()<br><br>        <span class="hljs-comment"># 随机生成一个消息队列(用于接收结果)</span><br>        result = self.channel.queue_declare(queue=<span class="hljs-string">&#x27;&#x27;</span>,exclusive=<span class="hljs-literal">True</span>)<br>        self.callback_queue = result.method.queue<br><br>        <span class="hljs-comment"># 监听消息队列中是否有值返回,如果有值则执行 on_response 函数(一旦有结果,则执行on_response)</span><br>        self.channel.basic_consume(queue=self.callback_queue,on_message_callback=self.on_response, auto_ack=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_response</span>(<span class="hljs-params">self, ch, method, props, body</span>):<br>        <span class="hljs-keyword">if</span> self.corr_id == props.correlation_id:<br>            self.response = body<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, n</span>):<br>        self.response = <span class="hljs-literal">None</span><br>        self.corr_id = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><br>        <span class="hljs-comment"># 客户端 给 服务端 发送一个任务:  任务id = corr_id / 任务内容 = &#x27;30&#x27; / 用于接收结果的队列名称</span><br>        self.channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                                   routing_key=<span class="hljs-string">&#x27;rpc_queue&#x27;</span>, <span class="hljs-comment"># 服务端接收任务的队列名称</span><br>                                   properties=pika.BasicProperties(<br>                                         reply_to = self.callback_queue, <span class="hljs-comment"># 用于接收结果的队列</span><br>                                         correlation_id = self.corr_id, <span class="hljs-comment"># 任务ID</span><br>                                         ),<br>                                   body=<span class="hljs-built_in">str</span>(n))<br>        <span class="hljs-keyword">while</span> self.response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.connection.process_data_events()<br><br>        <span class="hljs-keyword">return</span> self.response<br><br>fibonacci_rpc = FibonacciRpcClient()<br><br>response = fibonacci_rpc.call(<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;返回结果:&#x27;</span>,response)<br></code></pre></td></tr></table></figure><h2 id="3-集群搭建"><a href="#3-集群搭建" class="headerlink" title="3 集群搭建"></a>3 集群搭建</h2><h3 id="3-1-普通集群-副本集群"><a href="#3-1-普通集群-副本集群" class="headerlink" title="3.1 普通集群(副本集群)"></a>3.1 普通集群(副本集群)</h3><p>默认情况下:RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问<br>普通集群主节点必须可用，可以同步交换机和队列，但是队列中的消息只能看到，不能同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs she"># 1 集群规划<br>mq1: 10.0.0.100  mq1  master 主节点<br>mq2: 10.0.0.101  mq2  repl1  副本节点<br>mq3: 10.0.0.103  mq3  repl2  副本节点<br><br># 2 克隆三台机器主机名和ip映射（建立集群时仅支持按主机名创建，所以我们加好映射）<br>vim /etc/hosts<br># 分别在三台机器上加入（直接通过主机名就可以ping通）<br>10.0.0.100 mq1<br>10.0.0.101 mq2<br>10.0.0.103 mq3<br><br># 3 修改3个节点的主机名（分别在三台机器上）<br>hostname mq1<br>hostname mq2<br>hostname mq3<br># 4 分别在三台机器上安装相同版本的rabbitmq-server，并启动（启动就会生成cookie）<br>启动查看管理web页面能看到，但是不是集群状态<br>查看集群状态也是孤立的<br>rabbitmqctl cluster_status<br>现在我们全停掉（3台机器都停掉）<br><br><br># 5 三个机器安装rabbitmq,并同步cookie文件,在mq1上执行:(启动一遍，cookie才会有)<br>cat /var/lib/rabbitmq/.erlang.cookie<br>scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<br>scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<br><br># 6 查看cookie是否一致:<br>mq1: cat /var/lib/rabbitmq/.erlang.cookie <br>mq2: cat /var/lib/rabbitmq/.erlang.cookie <br>mq3: cat /var/lib/rabbitmq/.erlang.cookie <br><br># 7 后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面（三台机器都启动，老版本web页面看不到，新版本能看到）:<br>rabbitmq-server -detached <br><br># 8 在mq2和mq3上分别执行加入集群命令:<br>1.关闭       rabbitmqctl stop_app<br>2.加入集群    rabbitmqctl join_cluster rabbit@mq1  # 仅支持写主机名<br>3.启动服务    rabbitmqctl start_app<br><br># 9 查看集群状态,任意节点执行:<br>rabbitmqctl cluster_status<br><br># 10 如果出现如下显示,集群搭建成功:<br>Cluster status of node rabbit@mq1 ...<br>Basics<br>Cluster name: rabbit@mq1<br>Disk Nodes<br>rabbit@mq1<br>rabbit@mq2<br>rabbit@mq3<br>Running Nodes<br>rabbit@mq1<br>rabbit@mq2<br>rabbit@mq3<br># 11 登录管理界面,展示如下状态:<br><br><br>注意：如果启动不了，删除/var/lib/rabbitmq/mnesia下的所有问题重新操作<br></code></pre></td></tr></table></figure><p>测试命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1 现在我们挂掉从节点是可以的</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在mq2上执行</span><br>rabbitmqctl stop_app<br><span class="hljs-meta prompt_"># </span><span class="language-bash">再启动（集群不受影响），再发布消息也是可以的，只要主节点活着就可以</span><br>rabbitmqctl start_app<br><span class="hljs-meta prompt_"># </span><span class="language-bash">5 挂掉主节点，整个服务就不能用了</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在mq1上执行</span><br>rabbitmqctl stop_app<br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群不能用了（两个从节点不能对外提供服务），如果消息是不持久化的消息，主节点挂了，消息就没了</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布消息可以发布到主，从节点；消费消息也可以从主从节点消费</span><br>rabbitmqctl start_app<br></code></pre></td></tr></table></figure><h3 id="3-2-镜像集群"><a href="#3-2-镜像集群" class="headerlink" title="3.2 镜像集群"></a>3.2 镜像集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0.策略说明</span><br>rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;<br>-p Vhost： 可选参数，针对指定vhost下的queue进行设置<br>Name:     policy的名称<br>Pattern: queue的匹配模式(正则表达式)<br>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode<br>                ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes<br>                      all：表示在集群中所有的节点上进行镜像<br>                      exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定<br>                      nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定<br>             ha-params：ha-mode模式需要用到的参数<br>             ha-sync-mode：进行队列中消息的同步方式，有效值为automatic(自动)和manual（手动）<br>             priority：可选参数，policy的优先级<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.查看当前策略（可以在任意节点上执行）</span><br>rabbitmqctl list_policies<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.添加策略</span><br>rabbitmqctl set_policy ha-all &#x27;^lqz&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^lqz:匹配lqz开头队列</span><br>rabbitmqctl set_policy ha-all &#x27;^&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">对所有队列都做同步</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.删除策略</span><br>rabbitmqctl clear_policy ha-all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.测试集群</span><br>停掉主节点，其他节点依然可以提供服务<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
